CCS PCM C Compiler, Version 5.015, 5967               15-Jun-22 10:40

               Filename:   D:\code PIC\LCD\main.lst

               ROM used:   4526 words (55%)
                           Largest free fragment is 2048
               RAM used:   52 (14%) at main() level
                           96 (26%) worst case
               Stack used: 8 locations (6 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   052
002D:  BTFSS  0B.5
002E:  GOTO   031
002F:  BTFSC  0B.2
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   278
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   0EC
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  28
005D:  RETLW  0C
005E:  RETLW  01
005F:  RETLW  06
0060:  DATA 20,10
0061:  DATA 20,10
0062:  DATA 20,22
0063:  DATA C9,29
0064:  DATA 50,26
0065:  DATA C1,2C
0066:  DATA 20,10
0067:  DATA 20,10
0068:  DATA 20,10
0069:  DATA 20,10
006A:  DATA 00,00
006B:  DATA 20,10
006C:  DATA 20,10
006D:  DATA A0,29
006E:  DATA 45,2A
006F:  DATA D4,24
0070:  DATA CE,23
0071:  DATA 20,10
0072:  DATA 20,10
0073:  DATA 20,10
0074:  DATA 20,10
0075:  DATA 00,01
0076:  DATA 20,10
0077:  DATA 20,10
0078:  DATA A0,26
0079:  DATA 41,27
007A:  DATA D5,20
007B:  DATA 4C,10
007C:  DATA 20,10
007D:  DATA 20,10
007E:  DATA 20,10
007F:  DATA 20,10
0080:  DATA 00,01
0081:  DATA 20,10
0082:  DATA 20,10
0083:  DATA A0,20
0084:  DATA 55,2A
0085:  DATA 4F,10
0086:  DATA 20,10
0087:  DATA 20,10
0088:  DATA 20,10
0089:  DATA 20,10
008A:  DATA 20,10
008B:  DATA 00,01
008C:  DATA 20,10
008D:  DATA 20,10
008E:  DATA 20,10
008F:  DATA 20,10
0090:  DATA 20,10
0091:  DATA 20,10
0092:  DATA 20,10
0093:  DATA 20,10
0094:  DATA 00,01
0095:  DATA 20,10
0096:  DATA 20,10
0097:  DATA 20,10
0098:  DATA 20,10
0099:  DATA 20,10
009A:  DATA 20,10
009B:  DATA 20,10
009C:  DATA 20,10
009D:  DATA 00,00
009E:  DATA 20,10
009F:  DATA 20,10
00A0:  DATA AD,16
00A1:  DATA A0,27
00A2:  DATA 4E,10
00A3:  DATA AD,16
00A4:  DATA 20,10
00A5:  DATA 20,00
00A6:  DATA 20,10
00A7:  DATA 20,10
00A8:  DATA AD,16
00A9:  DATA A0,27
00AA:  DATA 46,23
00AB:  DATA A0,16
00AC:  DATA 2D,10
00AD:  DATA 20,00
00AE:  DATA 20,10
00AF:  DATA 20,10
00B0:  DATA AD,16
00B1:  DATA 20,23
00B2:  DATA 41,27
00B3:  DATA A0,16
00B4:  DATA 2D,10
00B5:  DATA 20,00
00B6:  DATA 20,10
00B7:  DATA 20,10
00B8:  DATA AD,16
00B9:  DATA 20,26
00BA:  DATA 45,22
00BB:  DATA A0,16
00BC:  DATA 2D,10
00BD:  DATA 20,00
00BE:  DATA 20,10
00BF:  DATA 20,10
00C0:  DATA 20,2A
00C1:  DATA 4F,28
00C2:  DATA 3A,00
00C3:  DATA 20,10
00C4:  DATA 20,10
00C5:  DATA 20,21
00C6:  DATA 4F,2A
00C7:  DATA 3A,00
00C8:  DATA 20,10
00C9:  DATA AD,16
00CA:  DATA D4,24
00CB:  DATA CD,22
00CC:  DATA 52,10
00CD:  DATA 4F,27
00CE:  DATA AD,16
00CF:  DATA 00,01
00D0:  DATA 20,10
00D1:  DATA AD,16
00D2:  DATA D4,24
00D3:  DATA CD,22
00D4:  DATA 52,10
00D5:  DATA 4F,23
00D6:  DATA C6,16
00D7:  DATA 2D,00
00D8:  DATA 20,10
00D9:  DATA AD,16
00DA:  DATA D4,24
00DB:  DATA CD,22
00DC:  DATA 52,10
00DD:  DATA 4F,27
00DE:  DATA AD,16
00DF:  DATA 00,01
00E0:  DATA 20,10
00E1:  DATA AD,16
00E2:  DATA D4,24
00E3:  DATA CD,22
00E4:  DATA 52,10
00E5:  DATA 4F,23
00E6:  DATA C6,16
00E7:  DATA 2D,00
00E8:  DATA 20,10
00E9:  DATA D4,24
00EA:  DATA CD,22
00EB:  DATA 3A,00
*
0122:  MOVF   68,W
0123:  BTFSC  03.2
0124:  GOTO   192
0125:  MOVWF  70
0126:  MOVF   6C,W
0127:  BTFSC  03.2
0128:  GOTO   192
0129:  ADDWF  70,F
012A:  BTFSC  03.0
012B:  GOTO   133
012C:  MOVLW  7F
012D:  SUBWF  70,F
012E:  BTFSS  03.0
012F:  GOTO   192
0130:  BTFSC  03.2
0131:  GOTO   192
0132:  GOTO   137
0133:  MOVLW  81
0134:  ADDWF  70,F
0135:  BTFSC  03.0
0136:  GOTO   192
0137:  MOVF   70,W
0138:  MOVWF  77
0139:  CLRF   78
013A:  CLRF   79
013B:  CLRF   7A
013C:  MOVF   69,W
013D:  MOVWF  74
013E:  BSF    74.7
013F:  MOVF   6A,W
0140:  MOVWF  73
0141:  MOVF   6B,W
0142:  MOVWF  72
0143:  MOVLW  18
0144:  MOVWF  70
0145:  CLRF   71
0146:  BTFSS  72.0
0147:  GOTO   160
0148:  MOVF   6F,W
0149:  ADDWF  7A,F
014A:  BTFSS  03.0
014B:  GOTO   152
014C:  INCF   79,F
014D:  BTFSS  03.2
014E:  GOTO   152
014F:  INCF   78,F
0150:  BTFSC  03.2
0151:  BSF    71.7
0152:  MOVF   6E,W
0153:  ADDWF  79,F
0154:  BTFSS  03.0
0155:  GOTO   159
0156:  INCF   78,F
0157:  BTFSC  03.2
0158:  BSF    71.7
0159:  MOVF   6D,W
015A:  MOVWF  6A
015B:  BSF    6A.7
015C:  MOVF   6A,W
015D:  ADDWF  78,F
015E:  BTFSC  03.0
015F:  BSF    71.7
0160:  RLF    71,F
0161:  RRF    78,F
0162:  RRF    79,F
0163:  RRF    7A,F
0164:  RRF    74,F
0165:  RRF    73,F
0166:  RRF    72,F
0167:  BCF    03.0
0168:  DECFSZ 70,F
0169:  GOTO   145
016A:  MOVLW  01
016B:  ADDWF  77,F
016C:  BTFSC  03.0
016D:  GOTO   192
016E:  BTFSC  78.7
016F:  GOTO   177
0170:  RLF    74,F
0171:  RLF    7A,F
0172:  RLF    79,F
0173:  RLF    78,F
0174:  DECF   77,F
0175:  BTFSC  03.2
0176:  GOTO   192
0177:  BTFSS  74.7
0178:  GOTO   188
0179:  INCF   7A,F
017A:  BTFSS  03.2
017B:  GOTO   188
017C:  INCF   79,F
017D:  BTFSS  03.2
017E:  GOTO   188
017F:  INCF   78,F
0180:  BTFSS  03.2
0181:  GOTO   188
0182:  RRF    78,F
0183:  RRF    79,F
0184:  RRF    7A,F
0185:  INCF   77,F
0186:  BTFSC  03.2
0187:  GOTO   192
0188:  MOVF   69,W
0189:  MOVWF  71
018A:  MOVF   6D,W
018B:  XORWF  71,F
018C:  BTFSS  71.7
018D:  GOTO   190
018E:  BSF    78.7
018F:  GOTO   196
0190:  BCF    78.7
0191:  GOTO   196
0192:  CLRF   77
0193:  CLRF   78
0194:  CLRF   79
0195:  CLRF   7A
0196:  RETURN
0197:  MOVF   6C,W
0198:  BTFSC  03.2
0199:  GOTO   271
019A:  BSF    03.5
019B:  MOVWF  24
019C:  MOVF   70,W
019D:  BTFSS  03.2
019E:  GOTO   1A1
019F:  BCF    03.5
01A0:  GOTO   271
01A1:  SUBWF  24,F
01A2:  BTFSS  03.0
01A3:  GOTO   1AB
01A4:  MOVLW  7F
01A5:  ADDWF  24,F
01A6:  BTFSS  03.0
01A7:  GOTO   1AA
01A8:  BCF    03.5
01A9:  GOTO   271
01AA:  GOTO   1B5
01AB:  MOVLW  81
01AC:  SUBWF  24,F
01AD:  BTFSC  03.0
01AE:  GOTO   1B1
01AF:  BCF    03.5
01B0:  GOTO   271
01B1:  BTFSS  03.2
01B2:  GOTO   1B5
01B3:  BCF    03.5
01B4:  GOTO   271
01B5:  MOVF   24,W
01B6:  MOVWF  77
01B7:  CLRF   78
01B8:  CLRF   79
01B9:  CLRF   7A
01BA:  CLRF   23
01BB:  BCF    03.5
01BC:  MOVF   6D,W
01BD:  BSF    03.5
01BE:  MOVWF  22
01BF:  BSF    22.7
01C0:  BCF    03.5
01C1:  MOVF   6E,W
01C2:  BSF    03.5
01C3:  MOVWF  21
01C4:  BCF    03.5
01C5:  MOVF   6F,W
01C6:  BSF    03.5
01C7:  MOVWF  20
01C8:  MOVLW  19
01C9:  MOVWF  24
01CA:  MOVF   73,W
01CB:  SUBWF  20,F
01CC:  BTFSC  03.0
01CD:  GOTO   1DE
01CE:  MOVLW  01
01CF:  SUBWF  21,F
01D0:  BTFSC  03.0
01D1:  GOTO   1DE
01D2:  SUBWF  22,F
01D3:  BTFSC  03.0
01D4:  GOTO   1DE
01D5:  SUBWF  23,F
01D6:  BTFSC  03.0
01D7:  GOTO   1DE
01D8:  INCF   23,F
01D9:  INCF   22,F
01DA:  INCF   21,F
01DB:  MOVF   73,W
01DC:  ADDWF  20,F
01DD:  GOTO   210
01DE:  MOVF   72,W
01DF:  SUBWF  21,F
01E0:  BTFSC  03.0
01E1:  GOTO   1F9
01E2:  MOVLW  01
01E3:  SUBWF  22,F
01E4:  BTFSC  03.0
01E5:  GOTO   1F9
01E6:  SUBWF  23,F
01E7:  BTFSC  03.0
01E8:  GOTO   1F9
01E9:  INCF   23,F
01EA:  INCF   22,F
01EB:  MOVF   72,W
01EC:  ADDWF  21,F
01ED:  MOVF   73,W
01EE:  ADDWF  20,F
01EF:  BTFSS  03.0
01F0:  GOTO   210
01F1:  INCF   21,F
01F2:  BTFSS  03.2
01F3:  GOTO   210
01F4:  INCF   22,F
01F5:  BTFSS  03.2
01F6:  GOTO   210
01F7:  INCF   23,F
01F8:  GOTO   210
01F9:  MOVF   71,W
01FA:  IORLW  80
01FB:  SUBWF  22,F
01FC:  BTFSC  03.0
01FD:  GOTO   20F
01FE:  MOVLW  01
01FF:  SUBWF  23,F
0200:  BTFSC  03.0
0201:  GOTO   20F
0202:  INCF   23,F
0203:  MOVF   71,W
0204:  IORLW  80
0205:  ADDWF  22,F
0206:  MOVF   72,W
0207:  ADDWF  21,F
0208:  BTFSS  03.0
0209:  GOTO   1ED
020A:  INCF   22,F
020B:  BTFSS  03.2
020C:  GOTO   1ED
020D:  INCF   23,F
020E:  GOTO   1ED
020F:  BSF    7A.0
0210:  DECFSZ 24,F
0211:  GOTO   213
0212:  GOTO   21E
0213:  BCF    03.0
0214:  RLF    20,F
0215:  RLF    21,F
0216:  RLF    22,F
0217:  RLF    23,F
0218:  BCF    03.0
0219:  RLF    7A,F
021A:  RLF    79,F
021B:  RLF    78,F
021C:  RLF    25,F
021D:  GOTO   1CA
021E:  BTFSS  25.0
021F:  GOTO   226
0220:  BCF    03.0
0221:  RRF    78,F
0222:  RRF    79,F
0223:  RRF    7A,F
0224:  RRF    25,F
0225:  GOTO   22A
0226:  DECFSZ 77,F
0227:  GOTO   22A
0228:  BCF    03.5
0229:  GOTO   271
022A:  BTFSC  25.7
022B:  GOTO   253
022C:  BCF    03.0
022D:  RLF    20,F
022E:  RLF    21,F
022F:  RLF    22,F
0230:  RLF    23,F
0231:  MOVF   73,W
0232:  SUBWF  20,F
0233:  BTFSC  03.0
0234:  GOTO   23F
0235:  MOVLW  01
0236:  SUBWF  21,F
0237:  BTFSC  03.0
0238:  GOTO   23F
0239:  SUBWF  22,F
023A:  BTFSC  03.0
023B:  GOTO   23F
023C:  SUBWF  23,F
023D:  BTFSS  03.0
023E:  GOTO   264
023F:  MOVF   72,W
0240:  SUBWF  21,F
0241:  BTFSC  03.0
0242:  GOTO   24A
0243:  MOVLW  01
0244:  SUBWF  22,F
0245:  BTFSC  03.0
0246:  GOTO   24A
0247:  SUBWF  23,F
0248:  BTFSS  03.0
0249:  GOTO   264
024A:  MOVF   71,W
024B:  IORLW  80
024C:  SUBWF  22,F
024D:  BTFSC  03.0
024E:  GOTO   253
024F:  MOVLW  01
0250:  SUBWF  23,F
0251:  BTFSS  03.0
0252:  GOTO   264
0253:  INCF   7A,F
0254:  BTFSS  03.2
0255:  GOTO   264
0256:  INCF   79,F
0257:  BTFSS  03.2
0258:  GOTO   264
0259:  INCF   78,F
025A:  BTFSS  03.2
025B:  GOTO   264
025C:  INCF   77,F
025D:  BTFSS  03.2
025E:  GOTO   261
025F:  BCF    03.5
0260:  GOTO   271
0261:  RRF    78,F
0262:  RRF    79,F
0263:  RRF    7A,F
0264:  BCF    03.5
0265:  MOVF   6D,W
0266:  BSF    03.5
0267:  MOVWF  24
0268:  MOVF   71,W
0269:  XORWF  24,F
026A:  BTFSS  24.7
026B:  GOTO   26E
026C:  BSF    78.7
026D:  GOTO   276
026E:  BCF    78.7
026F:  GOTO   276
0270:  BCF    03.5
0271:  CLRF   77
0272:  CLRF   78
0273:  CLRF   79
0274:  CLRF   7A
0275:  BSF    03.5
0276:  BCF    03.5
0277:  RETURN
*
028E:  MOVLW  8E
028F:  MOVWF  77
0290:  MOVF   69,W
0291:  MOVWF  78
0292:  MOVF   68,W
0293:  MOVWF  79
0294:  CLRF   7A
0295:  MOVF   78,F
0296:  BTFSS  03.2
0297:  GOTO   2A2
0298:  MOVF   79,W
0299:  MOVWF  78
029A:  CLRF   79
029B:  MOVLW  08
029C:  SUBWF  77,F
029D:  MOVF   78,F
029E:  BTFSS  03.2
029F:  GOTO   2A2
02A0:  CLRF   77
02A1:  GOTO   2AA
02A2:  BCF    03.0
02A3:  BTFSC  78.7
02A4:  GOTO   2A9
02A5:  RLF    79,F
02A6:  RLF    78,F
02A7:  DECF   77,F
02A8:  GOTO   2A2
02A9:  BCF    78.7
*
02FF:  DATA C6,18
0300:  DATA BA,27
0301:  DATA 4E,10
0302:  DATA 00,01
0303:  DATA C6,18
0304:  DATA BA,27
0305:  DATA 46,23
0306:  DATA 00,01
0307:  DATA 46,19
0308:  DATA BA,27
0309:  DATA 4E,10
030A:  DATA 00,01
030B:  DATA 46,19
030C:  DATA BA,27
030D:  DATA 46,23
030E:  DATA 00,01
030F:  DATA 4C,1D
0310:  DATA 4F,27
0311:  DATA 20,00
0312:  DATA 4C,1D
0313:  DATA 4F,23
0314:  DATA 46,00
0315:  DATA 2A,00
0316:  DATA 20,00
0317:  DATA 2A,00
0318:  DATA 20,00
0319:  DATA 20,10
031A:  DATA 20,10
031B:  DATA 20,22
031C:  DATA C9,29
031D:  DATA 50,26
031E:  DATA C1,2C
031F:  DATA 00,01
0320:  DATA 20,10
0321:  DATA 20,10
0322:  DATA A0,29
0323:  DATA 45,2A
0324:  DATA D4,24
0325:  DATA CE,23
0326:  DATA 00,01
0327:  DATA D4,32
0328:  DATA 6D,38
0329:  DATA BA,12
032A:  DATA 30,19
032B:  DATA 2E,18
032C:  DATA 66,00
032D:  DATA 43,00
032E:  DATA 20,10
032F:  DATA AD,16
0330:  DATA A0,26
0331:  DATA 41,27
0332:  DATA D5,20
0333:  DATA 4C,10
0334:  DATA AD,16
0335:  DATA 00,01
0336:  DATA 20,10
0337:  DATA 20,29
0338:  DATA C5,20
0339:  DATA C4,2C
033A:  DATA A0,10
033B:  DATA A1,10
033C:  DATA 20,10
033D:  DATA 00,01
033E:  DATA 20,10
033F:  DATA AD,16
0340:  DATA A0,26
0341:  DATA 41,27
0342:  DATA D5,20
0343:  DATA 4C,10
0344:  DATA AD,16
0345:  DATA 00,01
0346:  DATA 20,10
0347:  DATA A0,29
0348:  DATA C8,2A
0349:  DATA 54,22
034A:  DATA CF,2B
034B:  DATA 4E,10
034C:  DATA A1,10
034D:  DATA 21,00
*
053E:  MOVF   0B,W
053F:  MOVWF  50
0540:  BCF    0B.7
0541:  BSF    03.5
0542:  BSF    03.6
0543:  BSF    0C.7
0544:  BSF    0C.0
0545:  NOP
0546:  NOP
0547:  BCF    03.5
0548:  BCF    03.6
0549:  BTFSC  50.7
054A:  BSF    0B.7
054B:  BSF    03.6
054C:  MOVF   0C,W
054D:  ANDLW  7F
054E:  BTFSC  03.2
054F:  GOTO   592
0550:  BCF    03.6
0551:  MOVWF  50
0552:  BSF    03.6
0553:  MOVF   0D,W
0554:  BCF    03.6
0555:  MOVWF  51
0556:  BSF    03.6
0557:  MOVF   0F,W
0558:  BCF    03.6
0559:  MOVWF  52
055A:  MOVF   50,W
055B:  MOVWF  5B
055C:  CALL   51A
055D:  MOVF   51,W
055E:  BSF    03.6
055F:  MOVWF  0D
0560:  BCF    03.6
0561:  MOVF   52,W
0562:  BSF    03.6
0563:  MOVWF  0F
0564:  BCF    03.6
0565:  MOVF   0B,W
0566:  MOVWF  53
0567:  BCF    0B.7
0568:  BSF    03.5
0569:  BSF    03.6
056A:  BSF    0C.7
056B:  BSF    0C.0
056C:  NOP
056D:  NOP
056E:  BCF    03.5
056F:  BCF    03.6
0570:  BTFSC  53.7
0571:  BSF    0B.7
0572:  BSF    03.6
0573:  RLF    0C,W
0574:  RLF    0E,W
0575:  ANDLW  7F
0576:  BTFSC  03.2
0577:  GOTO   592
0578:  BCF    03.6
0579:  MOVWF  50
057A:  BSF    03.6
057B:  MOVF   0D,W
057C:  BCF    03.6
057D:  MOVWF  51
057E:  BSF    03.6
057F:  MOVF   0F,W
0580:  BCF    03.6
0581:  MOVWF  52
0582:  MOVF   50,W
0583:  MOVWF  5B
0584:  CALL   51A
0585:  MOVF   51,W
0586:  BSF    03.6
0587:  MOVWF  0D
0588:  BCF    03.6
0589:  MOVF   52,W
058A:  BSF    03.6
058B:  MOVWF  0F
058C:  INCF   0D,F
058D:  BTFSC  03.2
058E:  INCF   0F,F
058F:  BCF    03.6
0590:  GOTO   53E
0591:  BSF    03.6
0592:  BCF    03.6
0593:  RETURN
*
062B:  MOVF   0B,W
062C:  MOVWF  4F
062D:  BCF    0B.7
062E:  BSF    03.5
062F:  BSF    03.6
0630:  BSF    0C.7
0631:  BSF    0C.0
0632:  NOP
0633:  NOP
0634:  BCF    03.5
0635:  BCF    03.6
0636:  BTFSC  4F.7
0637:  BSF    0B.7
0638:  BTFSC  03.0
0639:  GOTO   662
063A:  BSF    03.6
063B:  MOVF   0C,W
063C:  ANDLW  7F
063D:  BCF    03.6
063E:  MOVWF  4F
063F:  BSF    03.6
0640:  MOVF   0D,W
0641:  BCF    03.6
0642:  MOVWF  50
0643:  BSF    03.6
0644:  MOVF   0F,W
0645:  BCF    03.6
0646:  MOVWF  51
0647:  MOVF   4F,W
0648:  MOVWF  5B
0649:  CALL   51A
064A:  MOVF   50,W
064B:  BSF    03.6
064C:  MOVWF  0D
064D:  BCF    03.6
064E:  MOVF   51,W
064F:  BSF    03.6
0650:  MOVWF  0F
0651:  BCF    03.6
0652:  MOVF   0B,W
0653:  MOVWF  52
0654:  BCF    0B.7
0655:  BSF    03.5
0656:  BSF    03.6
0657:  BSF    0C.7
0658:  BSF    0C.0
0659:  NOP
065A:  NOP
065B:  BCF    03.5
065C:  BCF    03.6
065D:  BTFSC  52.7
065E:  BSF    0B.7
065F:  DECFSZ 4E,F
0660:  GOTO   662
0661:  GOTO   681
0662:  BSF    03.6
0663:  RLF    0C,W
0664:  RLF    0E,W
0665:  ANDLW  7F
0666:  BCF    03.6
0667:  MOVWF  4F
0668:  BSF    03.6
0669:  MOVF   0D,W
066A:  BCF    03.6
066B:  MOVWF  50
066C:  BSF    03.6
066D:  MOVF   0F,W
066E:  BCF    03.6
066F:  MOVWF  51
0670:  MOVF   4F,W
0671:  MOVWF  5B
0672:  CALL   51A
0673:  MOVF   50,W
0674:  BSF    03.6
0675:  MOVWF  0D
0676:  BCF    03.6
0677:  MOVF   51,W
0678:  BSF    03.6
0679:  MOVWF  0F
067A:  INCF   0D,F
067B:  BTFSC  03.2
067C:  INCF   0F,F
067D:  BCF    03.0
067E:  BCF    03.6
067F:  DECFSZ 4E,F
0680:  GOTO   62B
0681:  BCF    0A.3
0682:  BSF    0A.4
0683:  GOTO   0E1 (RETURN)
0684:  MOVF   51,W
0685:  MOVWF  58
0686:  MOVF   55,W
0687:  XORWF  58,F
0688:  BTFSS  58.7
0689:  GOTO   68F
068A:  BCF    03.2
068B:  BCF    03.0
068C:  BTFSC  51.7
068D:  BSF    03.0
068E:  GOTO   6C2
068F:  MOVF   51,W
0690:  MOVWF  58
0691:  MOVF   54,W
0692:  MOVWF  59
0693:  MOVF   50,W
0694:  SUBWF  59,F
0695:  BTFSC  03.2
0696:  GOTO   69D
0697:  BTFSS  58.7
0698:  GOTO   6C2
0699:  MOVF   03,W
069A:  XORLW  01
069B:  MOVWF  03
069C:  GOTO   6C2
069D:  MOVF   55,W
069E:  MOVWF  59
069F:  MOVF   51,W
06A0:  SUBWF  59,F
06A1:  BTFSC  03.2
06A2:  GOTO   6A9
06A3:  BTFSS  58.7
06A4:  GOTO   6C2
06A5:  MOVF   03,W
06A6:  XORLW  01
06A7:  MOVWF  03
06A8:  GOTO   6C2
06A9:  MOVF   56,W
06AA:  MOVWF  59
06AB:  MOVF   52,W
06AC:  SUBWF  59,F
06AD:  BTFSC  03.2
06AE:  GOTO   6B5
06AF:  BTFSS  58.7
06B0:  GOTO   6C2
06B1:  MOVF   03,W
06B2:  XORLW  01
06B3:  MOVWF  03
06B4:  GOTO   6C2
06B5:  MOVF   57,W
06B6:  MOVWF  59
06B7:  MOVF   53,W
06B8:  SUBWF  59,F
06B9:  BTFSC  03.2
06BA:  GOTO   6C1
06BB:  BTFSS  58.7
06BC:  GOTO   6C2
06BD:  MOVF   03,W
06BE:  XORLW  01
06BF:  MOVWF  03
06C0:  GOTO   6C2
06C1:  BCF    03.0
06C2:  RETURN
*
06C6:  MOVLW  8E
06C7:  MOVWF  77
06C8:  MOVF   69,W
06C9:  MOVWF  78
06CA:  MOVF   68,W
06CB:  MOVWF  79
06CC:  CLRF   7A
06CD:  MOVF   78,F
06CE:  BTFSS  03.2
06CF:  GOTO   6DA
06D0:  MOVF   79,W
06D1:  MOVWF  78
06D2:  CLRF   79
06D3:  MOVLW  08
06D4:  SUBWF  77,F
06D5:  MOVF   78,F
06D6:  BTFSS  03.2
06D7:  GOTO   6DA
06D8:  CLRF   77
06D9:  GOTO   6E2
06DA:  BCF    03.0
06DB:  BTFSC  78.7
06DC:  GOTO   6E1
06DD:  RLF    79,F
06DE:  RLF    78,F
06DF:  DECF   77,F
06E0:  GOTO   6DA
06E1:  BCF    78.7
*
0703:  MOVLW  8E
0704:  MOVWF  77
0705:  MOVF   69,W
0706:  MOVWF  78
0707:  MOVF   68,W
0708:  MOVWF  79
0709:  CLRF   7A
070A:  MOVF   78,F
070B:  BTFSS  03.2
070C:  GOTO   717
070D:  MOVF   79,W
070E:  MOVWF  78
070F:  CLRF   79
0710:  MOVLW  08
0711:  SUBWF  77,F
0712:  MOVF   78,F
0713:  BTFSS  03.2
0714:  GOTO   717
0715:  CLRF   77
0716:  GOTO   71F
0717:  BCF    03.0
0718:  BTFSC  78.7
0719:  GOTO   71E
071A:  RLF    79,F
071B:  RLF    78,F
071C:  DECF   77,F
071D:  GOTO   717
071E:  BCF    78.7
*
0737:  MOVLW  8E
0738:  MOVWF  77
0739:  MOVF   69,W
073A:  MOVWF  78
073B:  MOVF   68,W
073C:  MOVWF  79
073D:  CLRF   7A
073E:  MOVF   78,F
073F:  BTFSS  03.2
0740:  GOTO   74B
0741:  MOVF   79,W
0742:  MOVWF  78
0743:  CLRF   79
0744:  MOVLW  08
0745:  SUBWF  77,F
0746:  MOVF   78,F
0747:  BTFSS  03.2
0748:  GOTO   74B
0749:  CLRF   77
074A:  GOTO   753
074B:  BCF    03.0
074C:  BTFSC  78.7
074D:  GOTO   752
074E:  RLF    79,F
074F:  RLF    78,F
0750:  DECF   77,F
0751:  GOTO   74B
0752:  BCF    78.7
*
0776:  MOVLW  8E
0777:  MOVWF  77
0778:  MOVF   69,W
0779:  MOVWF  78
077A:  MOVF   68,W
077B:  MOVWF  79
077C:  CLRF   7A
077D:  MOVF   78,F
077E:  BTFSS  03.2
077F:  GOTO   78A
0780:  MOVF   79,W
0781:  MOVWF  78
0782:  CLRF   79
0783:  MOVLW  08
0784:  SUBWF  77,F
0785:  MOVF   78,F
0786:  BTFSS  03.2
0787:  GOTO   78A
0788:  CLRF   77
0789:  GOTO   792
078A:  BCF    03.0
078B:  BTFSC  78.7
078C:  GOTO   791
078D:  RLF    79,F
078E:  RLF    78,F
078F:  DECF   77,F
0790:  GOTO   78A
0791:  BCF    78.7
*
0800:  MOVF   04,W
0801:  MOVWF  53
0802:  MOVF   52,W
0803:  MOVWF  55
0804:  BTFSC  03.2
0805:  GOTO   027
0806:  CLRF   2B
0807:  BTFSC  0B.7
0808:  BSF    2B.7
0809:  BCF    0B.7
080A:  MOVF   51,W
080B:  MOVWF  6B
080C:  MOVF   50,W
080D:  MOVWF  6A
080E:  MOVF   4F,W
080F:  MOVWF  69
0810:  MOVF   4E,W
0811:  MOVWF  68
0812:  CLRF   6F
0813:  CLRF   6E
0814:  MOVLW  20
0815:  MOVWF  6D
0816:  MOVLW  82
0817:  MOVWF  6C
0818:  BCF    0A.3
0819:  CALL   122
081A:  BSF    0A.3
081B:  BTFSC  2B.7
081C:  BSF    0B.7
081D:  MOVF   7A,W
081E:  MOVWF  51
081F:  MOVF   79,W
0820:  MOVWF  50
0821:  MOVF   78,W
0822:  MOVWF  4F
0823:  MOVF   77,W
0824:  MOVWF  4E
0825:  DECFSZ 55,F
0826:  GOTO   006
0827:  MOVF   51,W
0828:  MOVWF  5E
0829:  MOVF   50,W
082A:  MOVWF  5D
082B:  MOVF   4F,W
082C:  MOVWF  5C
082D:  MOVF   4E,W
082E:  MOVWF  5B
082F:  MOVF   5B,W
0830:  SUBLW  B6
0831:  MOVWF  5B
0832:  CLRF   7A
0833:  MOVF   5C,W
0834:  MOVWF  5F
0835:  BSF    5C.7
0836:  BCF    03.0
0837:  RRF    5C,F
0838:  RRF    5D,F
0839:  RRF    5E,F
083A:  RRF    7A,F
083B:  RRF    79,F
083C:  RRF    78,F
083D:  RRF    77,F
083E:  DECFSZ 5B,F
083F:  GOTO   036
0840:  BTFSS  5F.7
0841:  GOTO   04D
0842:  COMF   77,F
0843:  COMF   78,F
0844:  COMF   79,F
0845:  COMF   7A,F
0846:  INCF   77,F
0847:  BTFSC  03.2
0848:  INCF   78,F
0849:  BTFSC  03.2
084A:  INCF   79,F
084B:  BTFSC  03.2
084C:  INCF   7A,F
084D:  MOVF   7A,W
084E:  MOVWF  51
084F:  MOVF   79,W
0850:  MOVWF  50
0851:  MOVF   78,W
0852:  MOVWF  4F
0853:  MOVF   77,W
0854:  MOVWF  4E
0855:  BTFSS  51.7
0856:  GOTO   064
0857:  DECF   53,F
0858:  BSF    53.5
0859:  COMF   4E,F
085A:  COMF   4F,F
085B:  COMF   50,F
085C:  COMF   51,F
085D:  INCF   4E,F
085E:  BTFSC  03.2
085F:  INCF   4F,F
0860:  BTFSC  03.2
0861:  INCF   50,F
0862:  BTFSC  03.2
0863:  INCF   51,F
0864:  MOVLW  3B
0865:  MOVWF  5A
0866:  MOVLW  9A
0867:  MOVWF  59
0868:  MOVLW  CA
0869:  MOVWF  58
086A:  CLRF   57
086B:  MOVLW  0A
086C:  MOVWF  55
086D:  MOVF   52,W
086E:  BTFSC  03.2
086F:  INCF   53,F
0870:  BSF    03.1
0871:  MOVLW  4E
0872:  MOVWF  04
0873:  BCF    03.7
0874:  MOVF   51,W
0875:  MOVWF  5E
0876:  MOVF   50,W
0877:  MOVWF  5D
0878:  MOVF   4F,W
0879:  MOVWF  5C
087A:  MOVF   4E,W
087B:  MOVWF  5B
087C:  MOVF   5A,W
087D:  MOVWF  62
087E:  MOVF   59,W
087F:  MOVWF  61
0880:  MOVF   58,W
0881:  MOVWF  60
0882:  MOVF   57,W
0883:  MOVWF  5F
0884:  BTFSC  03.1
0885:  GOTO   089
0886:  MOVLW  63
0887:  MOVWF  04
0888:  BCF    03.7
0889:  CLRF   77
088A:  CLRF   78
088B:  CLRF   79
088C:  CLRF   7A
088D:  CLRF   63
088E:  CLRF   64
088F:  CLRF   65
0890:  CLRF   66
0891:  MOVF   62,W
0892:  IORWF  61,W
0893:  IORWF  60,W
0894:  IORWF  5F,W
0895:  BTFSC  03.2
0896:  GOTO   0C7
0897:  MOVLW  20
0898:  MOVWF  67
0899:  BCF    03.0
089A:  RLF    5B,F
089B:  RLF    5C,F
089C:  RLF    5D,F
089D:  RLF    5E,F
089E:  RLF    63,F
089F:  RLF    64,F
08A0:  RLF    65,F
08A1:  RLF    66,F
08A2:  MOVF   62,W
08A3:  SUBWF  66,W
08A4:  BTFSS  03.2
08A5:  GOTO   0B0
08A6:  MOVF   61,W
08A7:  SUBWF  65,W
08A8:  BTFSS  03.2
08A9:  GOTO   0B0
08AA:  MOVF   60,W
08AB:  SUBWF  64,W
08AC:  BTFSS  03.2
08AD:  GOTO   0B0
08AE:  MOVF   5F,W
08AF:  SUBWF  63,W
08B0:  BTFSS  03.0
08B1:  GOTO   0C1
08B2:  MOVF   5F,W
08B3:  SUBWF  63,F
08B4:  MOVF   60,W
08B5:  BTFSS  03.0
08B6:  INCFSZ 60,W
08B7:  SUBWF  64,F
08B8:  MOVF   61,W
08B9:  BTFSS  03.0
08BA:  INCFSZ 61,W
08BB:  SUBWF  65,F
08BC:  MOVF   62,W
08BD:  BTFSS  03.0
08BE:  INCFSZ 62,W
08BF:  SUBWF  66,F
08C0:  BSF    03.0
08C1:  RLF    77,F
08C2:  RLF    78,F
08C3:  RLF    79,F
08C4:  RLF    7A,F
08C5:  DECFSZ 67,F
08C6:  GOTO   099
08C7:  MOVF   63,W
08C8:  MOVWF  00
08C9:  INCF   04,F
08CA:  MOVF   64,W
08CB:  MOVWF  00
08CC:  INCF   04,F
08CD:  MOVF   65,W
08CE:  MOVWF  00
08CF:  INCF   04,F
08D0:  MOVF   66,W
08D1:  MOVWF  00
08D2:  MOVF   78,W
08D3:  MOVF   77,F
08D4:  BTFSS  03.2
08D5:  GOTO   0E9
08D6:  INCF   52,W
08D7:  SUBWF  55,W
08D8:  BTFSC  03.2
08D9:  GOTO   0E9
08DA:  MOVF   53,W
08DB:  BTFSC  03.2
08DC:  GOTO   0EB
08DD:  ANDLW  0F
08DE:  SUBWF  55,W
08DF:  BTFSC  03.2
08E0:  GOTO   0E3
08E1:  BTFSC  03.0
08E2:  GOTO   123
08E3:  BTFSC  53.7
08E4:  GOTO   123
08E5:  BTFSC  53.6
08E6:  GOTO   0EB
08E7:  MOVLW  20
08E8:  GOTO   11D
08E9:  MOVLW  20
08EA:  ANDWF  53,F
08EB:  BTFSS  53.5
08EC:  GOTO   0FB
08ED:  BCF    53.5
08EE:  MOVF   52,W
08EF:  BTFSS  03.2
08F0:  DECF   53,F
08F1:  MOVF   77,W
08F2:  MOVWF  53
08F3:  MOVLW  2D
08F4:  MOVWF  5B
08F5:  BCF    0A.3
08F6:  CALL   51A
08F7:  BSF    0A.3
08F8:  MOVF   53,W
08F9:  MOVWF  77
08FA:  CLRF   53
08FB:  MOVF   52,W
08FC:  SUBWF  55,W
08FD:  BTFSS  03.2
08FE:  GOTO   10B
08FF:  MOVF   77,W
0900:  MOVWF  53
0901:  MOVLW  2E
0902:  MOVWF  5B
0903:  BCF    0A.3
0904:  CALL   51A
0905:  BSF    0A.3
0906:  MOVF   53,W
0907:  MOVWF  77
0908:  MOVLW  20
0909:  ANDWF  53,F
090A:  MOVLW  00
090B:  MOVLW  30
090C:  BTFSS  53.5
090D:  GOTO   11D
090E:  BCF    53.5
090F:  MOVF   52,W
0910:  BTFSS  03.2
0911:  DECF   53,F
0912:  MOVF   77,W
0913:  MOVWF  53
0914:  MOVLW  2D
0915:  MOVWF  5B
0916:  BCF    0A.3
0917:  CALL   51A
0918:  BSF    0A.3
0919:  MOVF   53,W
091A:  MOVWF  77
091B:  CLRF   53
091C:  MOVLW  30
091D:  ADDWF  77,F
091E:  MOVF   77,W
091F:  MOVWF  5B
0920:  BCF    0A.3
0921:  CALL   51A
0922:  BSF    0A.3
0923:  BCF    03.1
0924:  MOVF   5A,W
0925:  MOVWF  5E
0926:  MOVF   59,W
0927:  MOVWF  5D
0928:  MOVF   58,W
0929:  MOVWF  5C
092A:  MOVF   57,W
092B:  MOVWF  5B
092C:  CLRF   62
092D:  CLRF   61
092E:  CLRF   60
092F:  MOVLW  0A
0930:  MOVWF  5F
0931:  BTFSC  03.1
0932:  GOTO   136
0933:  MOVLW  63
0934:  MOVWF  04
0935:  BCF    03.7
0936:  CLRF   77
0937:  CLRF   78
0938:  CLRF   79
0939:  CLRF   7A
093A:  CLRF   63
093B:  CLRF   64
093C:  CLRF   65
093D:  CLRF   66
093E:  MOVF   62,W
093F:  IORWF  61,W
0940:  IORWF  60,W
0941:  IORWF  5F,W
0942:  BTFSC  03.2
0943:  GOTO   174
0944:  MOVLW  20
0945:  MOVWF  67
0946:  BCF    03.0
0947:  RLF    5B,F
0948:  RLF    5C,F
0949:  RLF    5D,F
094A:  RLF    5E,F
094B:  RLF    63,F
094C:  RLF    64,F
094D:  RLF    65,F
094E:  RLF    66,F
094F:  MOVF   62,W
0950:  SUBWF  66,W
0951:  BTFSS  03.2
0952:  GOTO   15D
0953:  MOVF   61,W
0954:  SUBWF  65,W
0955:  BTFSS  03.2
0956:  GOTO   15D
0957:  MOVF   60,W
0958:  SUBWF  64,W
0959:  BTFSS  03.2
095A:  GOTO   15D
095B:  MOVF   5F,W
095C:  SUBWF  63,W
095D:  BTFSS  03.0
095E:  GOTO   16E
095F:  MOVF   5F,W
0960:  SUBWF  63,F
0961:  MOVF   60,W
0962:  BTFSS  03.0
0963:  INCFSZ 60,W
0964:  SUBWF  64,F
0965:  MOVF   61,W
0966:  BTFSS  03.0
0967:  INCFSZ 61,W
0968:  SUBWF  65,F
0969:  MOVF   62,W
096A:  BTFSS  03.0
096B:  INCFSZ 62,W
096C:  SUBWF  66,F
096D:  BSF    03.0
096E:  RLF    77,F
096F:  RLF    78,F
0970:  RLF    79,F
0971:  RLF    7A,F
0972:  DECFSZ 67,F
0973:  GOTO   146
0974:  MOVF   63,W
0975:  MOVWF  00
0976:  INCF   04,F
0977:  MOVF   64,W
0978:  MOVWF  00
0979:  INCF   04,F
097A:  MOVF   65,W
097B:  MOVWF  00
097C:  INCF   04,F
097D:  MOVF   66,W
097E:  MOVWF  00
097F:  MOVF   7A,W
0980:  MOVWF  5A
0981:  MOVF   79,W
0982:  MOVWF  59
0983:  MOVF   78,W
0984:  MOVWF  58
0985:  MOVF   77,W
0986:  MOVWF  57
0987:  DECFSZ 55,F
0988:  GOTO   070
0989:  BCF    0A.3
098A:  BSF    0A.4
098B:  GOTO   0F0 (RETURN)
*
09E3:  MOVLW  20
09E4:  BTFSS  50.4
09E5:  MOVLW  30
09E6:  MOVWF  51
09E7:  MOVF   4F,W
09E8:  MOVWF  77
09E9:  BTFSS  77.7
09EA:  GOTO   1F3
09EB:  COMF   77,F
09EC:  INCF   77,F
09ED:  MOVF   77,W
09EE:  MOVWF  4F
09EF:  MOVLW  2D
09F0:  MOVWF  51
09F1:  BSF    50.7
09F2:  BSF    50.0
09F3:  MOVF   78,W
09F4:  MOVF   4F,W
09F5:  MOVWF  55
09F6:  MOVLW  64
09F7:  MOVWF  56
09F8:  MOVF   56,W
09F9:  CLRF   78
09FA:  SUBWF  55,W
09FB:  BTFSC  03.0
09FC:  GOTO   200
09FD:  MOVF   55,W
09FE:  MOVWF  77
09FF:  GOTO   20C
0A00:  CLRF   77
0A01:  MOVLW  08
0A02:  MOVWF  57
0A03:  RLF    55,F
0A04:  RLF    77,F
0A05:  MOVF   56,W
0A06:  SUBWF  77,W
0A07:  BTFSC  03.0
0A08:  MOVWF  77
0A09:  RLF    78,F
0A0A:  DECFSZ 57,F
0A0B:  GOTO   203
0A0C:  MOVF   77,W
0A0D:  MOVWF  4F
0A0E:  MOVLW  30
0A0F:  ADDWF  78,W
0A10:  MOVWF  52
0A11:  MOVF   4F,W
0A12:  MOVWF  55
0A13:  MOVLW  0A
0A14:  MOVWF  56
0A15:  MOVF   56,W
0A16:  CLRF   78
0A17:  SUBWF  55,W
0A18:  BTFSC  03.0
0A19:  GOTO   21D
0A1A:  MOVF   55,W
0A1B:  MOVWF  77
0A1C:  GOTO   229
0A1D:  CLRF   77
0A1E:  MOVLW  08
0A1F:  MOVWF  57
0A20:  RLF    55,F
0A21:  RLF    77,F
0A22:  MOVF   56,W
0A23:  SUBWF  77,W
0A24:  BTFSC  03.0
0A25:  MOVWF  77
0A26:  RLF    78,F
0A27:  DECFSZ 57,F
0A28:  GOTO   220
0A29:  MOVLW  30
0A2A:  ADDWF  77,W
0A2B:  MOVWF  54
0A2C:  MOVLW  30
0A2D:  ADDWF  78,W
0A2E:  MOVWF  53
0A2F:  MOVF   51,W
0A30:  MOVWF  77
0A31:  MOVLW  30
0A32:  SUBWF  52,W
0A33:  BTFSC  03.2
0A34:  GOTO   239
0A35:  BSF    50.1
0A36:  BTFSC  50.7
0A37:  BSF    50.2
0A38:  GOTO   24D
0A39:  MOVF   51,W
0A3A:  MOVWF  52
0A3B:  MOVLW  20
0A3C:  MOVWF  51
0A3D:  MOVLW  30
0A3E:  SUBWF  53,W
0A3F:  BTFSC  03.2
0A40:  GOTO   245
0A41:  BSF    50.0
0A42:  BTFSC  50.7
0A43:  BSF    50.1
0A44:  GOTO   24D
0A45:  BTFSS  03.2
0A46:  BSF    50.0
0A47:  BTFSS  03.2
0A48:  GOTO   24D
0A49:  MOVF   52,W
0A4A:  MOVWF  53
0A4B:  MOVLW  20
0A4C:  MOVWF  52
0A4D:  BTFSC  50.2
0A4E:  GOTO   254
0A4F:  BTFSC  50.1
0A50:  GOTO   259
0A51:  BTFSC  50.0
0A52:  GOTO   25E
0A53:  GOTO   263
0A54:  MOVF   51,W
0A55:  MOVWF  5B
0A56:  BCF    0A.3
0A57:  CALL   51A
0A58:  BSF    0A.3
0A59:  MOVF   52,W
0A5A:  MOVWF  5B
0A5B:  BCF    0A.3
0A5C:  CALL   51A
0A5D:  BSF    0A.3
0A5E:  MOVF   53,W
0A5F:  MOVWF  5B
0A60:  BCF    0A.3
0A61:  CALL   51A
0A62:  BSF    0A.3
0A63:  MOVF   54,W
0A64:  MOVWF  5B
0A65:  BCF    0A.3
0A66:  CALL   51A
0A67:  BSF    0A.3
0A68:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
034E:  MOVLW  5C
034F:  MOVWF  04
0350:  BCF    03.7
0351:  MOVF   00,W
0352:  BTFSC  03.2
0353:  GOTO   362
0354:  MOVLW  01
0355:  MOVWF  78
0356:  CLRF   77
0357:  DECFSZ 77,F
0358:  GOTO   357
0359:  DECFSZ 78,F
035A:  GOTO   356
035B:  MOVLW  4A
035C:  MOVWF  77
035D:  DECFSZ 77,F
035E:  GOTO   35D
035F:  GOTO   360
0360:  DECFSZ 00,F
0361:  GOTO   354
0362:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_B2 
.................... //!#define LCD_ENABLE_PIN     PIN_B3 
.................... //!#define LCD_DATA4          PIN_B4 
.................... //!#define LCD_DATA5          PIN_B5 
.................... //!#define LCD_DATA6          PIN_B6 
.................... //!#define LCD_DATA7          PIN_B7  
....................  
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_C1 
.................... //!#define LCD_ENABLE_PIN     PIN_C2 
.................... //!#define LCD_DATA4          PIN_C3 
.................... //!#define LCD_DATA5          PIN_C4 
.................... //!#define LCD_DATA6          PIN_C5 
.................... //!#define LCD_DATA7          PIN_C6 
....................  
....................  
.................... #define LCD_RS_PIN      PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
....................  
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
046B:  BSF    03.5
046C:  BCF    08.4
.................... output_drive(LCD_DATA5); 
046D:  BCF    08.5
.................... output_drive(LCD_DATA6); 
046E:  BCF    08.6
.................... output_drive(LCD_DATA7); 
046F:  BCF    08.7
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
0470:  BCF    08.3
.................... lcd_rs_tris(); 
0471:  BCF    08.1
.................... lcd_rw_tris(); 
0472:  BCF    08.2
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
0473:  BCF    03.5
0474:  BCF    08.1
0475:  BSF    03.5
0476:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
0477:  BCF    03.5
0478:  BCF    08.2
0479:  BSF    03.5
047A:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
047B:  BCF    03.5
047C:  BCF    08.3
047D:  BSF    03.5
047E:  BCF    08.3
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
047F:  MOVLW  0F
0480:  BCF    03.5
0481:  MOVWF  5C
0482:  CALL   34E
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
0483:  MOVLW  01
0484:  MOVWF  4E
0485:  MOVF   4E,W
0486:  SUBLW  03
0487:  BTFSS  03.0
0488:  GOTO   4BA
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
0489:  MOVLW  03
048A:  MOVWF  63
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
*
04B4:  MOVLW  05
04B5:  BCF    03.5
04B6:  MOVWF  5C
04B7:  CALL   34E
04B8:  INCF   4E,F
04B9:  GOTO   485
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
04BA:  MOVLW  02
04BB:  MOVWF  63
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
*
04E5:  BCF    03.5
04E6:  CLRF   4E
04E7:  MOVF   4E,W
04E8:  SUBLW  03
04E9:  BTFSS  03.0
04EA:  GOTO   4F4
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
04EB:  MOVF   4E,W
04EC:  CALL   058
04ED:  MOVWF  4F
04EE:  CLRF   60
04EF:  MOVF   4F,W
04F0:  MOVWF  61
04F1:  CALL   363
04F2:  INCF   4E,F
04F3:  GOTO   4E7
04F4:  BCF    0A.3
04F5:  BSF    0A.4
04F6:  GOTO   027 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
0366:  BSF    08.4
.................... output_float(LCD_DATA5); 
0367:  BSF    08.5
.................... output_float(LCD_DATA6); 
0368:  BSF    08.6
.................... output_float(LCD_DATA7); 
0369:  BSF    08.7
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
036A:  BCF    03.5
036B:  BSF    08.2
036C:  BSF    03.5
036D:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
036E:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
036F:  BCF    03.5
0370:  BSF    08.3
0371:  BSF    03.5
0372:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0373:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
*
03A5:  MOVF   78,W
03A6:  MOVWF  63
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
03A7:  BCF    08.3
03A8:  BSF    03.5
03A9:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
03AA:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
03AB:  BCF    03.5
03AC:  BSF    08.3
03AD:  BSF    03.5
03AE:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
03AF:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
*
03E1:  MOVF   78,W
03E2:  MOVWF  62
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
03E3:  BCF    08.3
03E4:  BSF    03.5
03E5:  BCF    08.3
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
03E6:  BCF    08.4
.................... output_drive(LCD_DATA5); 
03E7:  BCF    08.5
.................... output_drive(LCD_DATA6); 
03E8:  BCF    08.6
.................... output_drive(LCD_DATA7); 
03E9:  BCF    08.7
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
03EA:  BCF    03.5
03EB:  SWAPF  63,W
03EC:  MOVWF  77
03ED:  MOVLW  F0
03EE:  ANDWF  77,F
03EF:  MOVF   77,W
03F0:  IORWF  62,W
03F1:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
0374:  BCF    03.5
0375:  CLRF   64
*
03B0:  BCF    03.5
03B1:  CLRF   64
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
*
0376:  BSF    03.5
0377:  BSF    08.4
0378:  MOVLW  00
0379:  BCF    03.5
037A:  BTFSC  08.4
037B:  MOVLW  01
037C:  IORWF  64,F
*
03B2:  BSF    03.5
03B3:  BSF    08.4
03B4:  MOVLW  00
03B5:  BCF    03.5
03B6:  BTFSC  08.4
03B7:  MOVLW  01
03B8:  IORWF  64,F
.................... n |= input(LCD_DATA5) << 1; 
*
037D:  BSF    03.5
037E:  BSF    08.5
037F:  MOVLW  00
0380:  BCF    03.5
0381:  BTFSC  08.5
0382:  MOVLW  01
0383:  MOVWF  77
0384:  BCF    03.0
0385:  RLF    77,F
0386:  MOVF   77,W
0387:  IORWF  64,F
*
03B9:  BSF    03.5
03BA:  BSF    08.5
03BB:  MOVLW  00
03BC:  BCF    03.5
03BD:  BTFSC  08.5
03BE:  MOVLW  01
03BF:  MOVWF  77
03C0:  BCF    03.0
03C1:  RLF    77,F
03C2:  MOVF   77,W
03C3:  IORWF  64,F
.................... n |= input(LCD_DATA6) << 2; 
*
0388:  BSF    03.5
0389:  BSF    08.6
038A:  MOVLW  00
038B:  BCF    03.5
038C:  BTFSC  08.6
038D:  MOVLW  01
038E:  MOVWF  77
038F:  RLF    77,F
0390:  RLF    77,F
0391:  MOVLW  FC
0392:  ANDWF  77,F
0393:  MOVF   77,W
0394:  IORWF  64,F
*
03C4:  BSF    03.5
03C5:  BSF    08.6
03C6:  MOVLW  00
03C7:  BCF    03.5
03C8:  BTFSC  08.6
03C9:  MOVLW  01
03CA:  MOVWF  77
03CB:  RLF    77,F
03CC:  RLF    77,F
03CD:  MOVLW  FC
03CE:  ANDWF  77,F
03CF:  MOVF   77,W
03D0:  IORWF  64,F
.................... n |= input(LCD_DATA7) << 3; 
*
0395:  BSF    03.5
0396:  BSF    08.7
0397:  MOVLW  00
0398:  BCF    03.5
0399:  BTFSC  08.7
039A:  MOVLW  01
039B:  MOVWF  77
039C:  RLF    77,F
039D:  RLF    77,F
039E:  RLF    77,F
039F:  MOVLW  F8
03A0:  ANDWF  77,F
03A1:  MOVF   77,W
03A2:  IORWF  64,F
*
03D1:  BSF    03.5
03D2:  BSF    08.7
03D3:  MOVLW  00
03D4:  BCF    03.5
03D5:  BTFSC  08.7
03D6:  MOVLW  01
03D7:  MOVWF  77
03D8:  RLF    77,F
03D9:  RLF    77,F
03DA:  RLF    77,F
03DB:  MOVLW  F8
03DC:  ANDWF  77,F
03DD:  MOVF   77,W
03DE:  IORWF  64,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
*
03A3:  MOVF   64,W
03A4:  MOVWF  78
*
03DF:  MOVF   64,W
03E0:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
*
0363:  BCF    08.1
0364:  BSF    03.5
0365:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
03F2:  MOVF   78,W
03F3:  MOVWF  62
03F4:  BTFSS  62.7
03F5:  GOTO   3F8
03F6:  BSF    03.5
03F7:  GOTO   366
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
03F8:  MOVF   60,F
03F9:  BTFSS  03.2
03FA:  GOTO   3FD
03FB:  BCF    08.1
03FC:  GOTO   3FE
03FD:  BSF    08.1
03FE:  BSF    03.5
03FF:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0400:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
0401:  BCF    03.5
0402:  BCF    08.2
0403:  BSF    03.5
0404:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0405:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
0406:  BCF    03.5
0407:  BCF    08.3
0408:  BSF    03.5
0409:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
040A:  BCF    03.5
040B:  SWAPF  61,W
040C:  MOVWF  62
040D:  MOVLW  0F
040E:  ANDWF  62,F
040F:  MOVF   62,W
0410:  MOVWF  63
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
*
043A:  BCF    03.5
043B:  MOVF   61,W
043C:  ANDLW  0F
043D:  MOVWF  62
043E:  MOVF   62,W
043F:  MOVWF  63
*
0469:  BCF    03.5
046A:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0411:  BTFSC  63.0
0412:  GOTO   415
0413:  BCF    08.4
0414:  GOTO   416
0415:  BSF    08.4
0416:  BSF    03.5
0417:  BCF    08.4
*
0440:  BTFSC  63.0
0441:  GOTO   444
0442:  BCF    08.4
0443:  GOTO   445
0444:  BSF    08.4
0445:  BSF    03.5
0446:  BCF    08.4
*
048B:  BTFSC  63.0
048C:  GOTO   48F
048D:  BCF    08.4
048E:  GOTO   490
048F:  BSF    08.4
0490:  BSF    03.5
0491:  BCF    08.4
*
04BC:  BTFSC  63.0
04BD:  GOTO   4C0
04BE:  BCF    08.4
04BF:  GOTO   4C1
04C0:  BSF    08.4
04C1:  BSF    03.5
04C2:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
*
0418:  BCF    03.5
0419:  BTFSC  63.1
041A:  GOTO   41D
041B:  BCF    08.5
041C:  GOTO   41E
041D:  BSF    08.5
041E:  BSF    03.5
041F:  BCF    08.5
*
0447:  BCF    03.5
0448:  BTFSC  63.1
0449:  GOTO   44C
044A:  BCF    08.5
044B:  GOTO   44D
044C:  BSF    08.5
044D:  BSF    03.5
044E:  BCF    08.5
*
0492:  BCF    03.5
0493:  BTFSC  63.1
0494:  GOTO   497
0495:  BCF    08.5
0496:  GOTO   498
0497:  BSF    08.5
0498:  BSF    03.5
0499:  BCF    08.5
*
04C3:  BCF    03.5
04C4:  BTFSC  63.1
04C5:  GOTO   4C8
04C6:  BCF    08.5
04C7:  GOTO   4C9
04C8:  BSF    08.5
04C9:  BSF    03.5
04CA:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
*
0420:  BCF    03.5
0421:  BTFSC  63.2
0422:  GOTO   425
0423:  BCF    08.6
0424:  GOTO   426
0425:  BSF    08.6
0426:  BSF    03.5
0427:  BCF    08.6
*
044F:  BCF    03.5
0450:  BTFSC  63.2
0451:  GOTO   454
0452:  BCF    08.6
0453:  GOTO   455
0454:  BSF    08.6
0455:  BSF    03.5
0456:  BCF    08.6
*
049A:  BCF    03.5
049B:  BTFSC  63.2
049C:  GOTO   49F
049D:  BCF    08.6
049E:  GOTO   4A0
049F:  BSF    08.6
04A0:  BSF    03.5
04A1:  BCF    08.6
*
04CB:  BCF    03.5
04CC:  BTFSC  63.2
04CD:  GOTO   4D0
04CE:  BCF    08.6
04CF:  GOTO   4D1
04D0:  BSF    08.6
04D1:  BSF    03.5
04D2:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
*
0428:  BCF    03.5
0429:  BTFSC  63.3
042A:  GOTO   42D
042B:  BCF    08.7
042C:  GOTO   42E
042D:  BSF    08.7
042E:  BSF    03.5
042F:  BCF    08.7
*
0457:  BCF    03.5
0458:  BTFSC  63.3
0459:  GOTO   45C
045A:  BCF    08.7
045B:  GOTO   45D
045C:  BSF    08.7
045D:  BSF    03.5
045E:  BCF    08.7
*
04A2:  BCF    03.5
04A3:  BTFSC  63.3
04A4:  GOTO   4A7
04A5:  BCF    08.7
04A6:  GOTO   4A8
04A7:  BSF    08.7
04A8:  BSF    03.5
04A9:  BCF    08.7
*
04D3:  BCF    03.5
04D4:  BTFSC  63.3
04D5:  GOTO   4D8
04D6:  BCF    08.7
04D7:  GOTO   4D9
04D8:  BSF    08.7
04D9:  BSF    03.5
04DA:  BCF    08.7
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
*
0430:  NOP
*
045F:  NOP
*
04AA:  NOP
*
04DB:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
*
0431:  BCF    03.5
0432:  BSF    08.3
0433:  BSF    03.5
0434:  BCF    08.3
*
0460:  BCF    03.5
0461:  BSF    08.3
0462:  BSF    03.5
0463:  BCF    08.3
*
04AB:  BCF    03.5
04AC:  BSF    08.3
04AD:  BSF    03.5
04AE:  BCF    08.3
*
04DC:  BCF    03.5
04DD:  BSF    08.3
04DE:  BSF    03.5
04DF:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
*
0435:  GOTO   436
*
0464:  GOTO   465
*
04AF:  GOTO   4B0
*
04E0:  GOTO   4E1
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
*
0436:  BCF    03.5
0437:  BCF    08.3
0438:  BSF    03.5
0439:  BCF    08.3
*
0465:  BCF    03.5
0466:  BCF    08.3
0467:  BSF    03.5
0468:  BCF    08.3
*
04B0:  BCF    03.5
04B1:  BCF    08.3
04B2:  BSF    03.5
04B3:  BCF    08.3
*
04E1:  BCF    03.5
04E2:  BCF    08.3
04E3:  BSF    03.5
04E4:  BCF    08.3
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
04F7:  DECFSZ 5D,W
04F8:  GOTO   4FB
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
04F9:  CLRF   5E
04FA:  GOTO   50F
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
04FB:  MOVF   5D,W
04FC:  SUBLW  02
04FD:  BTFSS  03.2
04FE:  GOTO   502
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
04FF:  MOVLW  40
0500:  MOVWF  5E
0501:  GOTO   50F
.................... else if(y==3) 
0502:  MOVF   5D,W
0503:  SUBLW  03
0504:  BTFSS  03.2
0505:  GOTO   509
....................    address=lcd_line_three;      
0506:  MOVLW  14
0507:  MOVWF  5E
0508:  GOTO   50F
.................... else if(y==4) 
0509:  MOVF   5D,W
050A:  SUBLW  04
050B:  BTFSS  03.2
050C:  GOTO   50F
....................    address=lcd_line_four;    
050D:  MOVLW  54
050E:  MOVWF  5E
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
050F:  MOVLW  01
0510:  SUBWF  5C,W
0511:  ADDWF  5E,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0512:  MOVF   5E,W
0513:  IORLW  80
0514:  MOVWF  5F
0515:  CLRF   60
0516:  MOVF   5F,W
0517:  MOVWF  61
0518:  CALL   363
0519:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
051A:  MOVF   5B,W
051B:  XORLW  0C
051C:  BTFSC  03.2
051D:  GOTO   525
051E:  XORLW  06
051F:  BTFSC  03.2
0520:  GOTO   52D
0521:  XORLW  02
0522:  BTFSC  03.2
0523:  GOTO   533
0524:  GOTO   538
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0525:  CLRF   60
0526:  MOVLW  01
0527:  MOVWF  61
0528:  CALL   363
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
0529:  MOVLW  02
052A:  MOVWF  5C
052B:  CALL   34E
....................       break; 
052C:  GOTO   53D
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
052D:  MOVLW  01
052E:  MOVWF  5C
052F:  MOVLW  02
0530:  MOVWF  5D
0531:  CALL   4F7
....................       break; 
0532:  GOTO   53D
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
0533:  CLRF   60
0534:  MOVLW  10
0535:  MOVWF  61
0536:  CALL   363
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
0537:  GOTO   53D
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);// Goi ham truyen thong tin (du lieu) sang C.LCD. 
0538:  MOVLW  01
0539:  MOVWF  60
053A:  MOVF   5B,W
053B:  MOVWF  61
053C:  CALL   363
....................       break; 
....................    } 
053D:  RETURN
.................... }       
.................... // ***************************************************    
....................  
....................  
....................  
.................... #define UP input(PIN_B0) 
.................... #define DOWN input(PIN_B1) 
.................... #define OK input(PIN_B2) 
.................... #define BACK input(PIN_B3) 
.................... #define BTN_DEN input(PIN_B4) 
.................... #define BTN_QUAT input(PIN_B5) 
.................... #define BTN_QUAT2 input(PIN_C0) 
.................... //! 
.................... //!#define SPBRG (int8*)0x99 
.................... //!#define RCSTA (int8*)0x18 
.................... //!#define TXSTA (int*)0x98 
.................... //! 
.................... Typedef struct NGUONG 
.................... { 
....................    int TOP; 
....................    int BOT; 
.................... }Nguong; 
.................... unsigned char select = 1; 
.................... int time = 0; 
.................... long time1 = 0; 
.................... int time_light = 0; 
.................... int flag_dasetup = 0; 
.................... int flag = 1; 
.................... int flag_manual = 0; 
.................... int flag_battatden = 0; 
.................... float Tam; 
.................... float GiatriADC; 
.................... float Nhietdo; 
.................... int dem1 = 0; 
.................... int bien_light; 
.................... int bien_auto = 0; 
.................... int lockquat =0; 
.................... Nguong Nguongnhietdo = {45,40}; 
*
1020:  MOVLW  2D
1021:  BCF    03.5
1022:  MOVWF  45
1023:  MOVLW  28
1024:  MOVWF  46
.................... void hienthi(unsigned char select) 
.................... {        
....................    lcd_gotoxy(1, 1); 
*
05A1:  MOVLW  01
05A2:  MOVWF  5C
05A3:  MOVWF  5D
05A4:  CALL   4F7
....................    printf(lcd_putc,"     DISPLAY        "); 
05A5:  MOVLW  60
05A6:  BSF    03.6
05A7:  MOVWF  0D
05A8:  MOVLW  00
05A9:  MOVWF  0F
05AA:  BCF    03.6
05AB:  CALL   53E
....................    lcd_gotoxy(1, 2); 
05AC:  MOVLW  01
05AD:  MOVWF  5C
05AE:  MOVLW  02
05AF:  MOVWF  5D
05B0:  CALL   4F7
....................    printf(lcd_putc,"     SETTING        ");    
05B1:  MOVLW  6B
05B2:  BSF    03.6
05B3:  MOVWF  0D
05B4:  MOVLW  00
05B5:  MOVWF  0F
05B6:  BCF    03.6
05B7:  CALL   53E
....................    lcd_gotoxy(1,select); 
05B8:  MOVLW  01
05B9:  MOVWF  5C
05BA:  MOVF   4E,W
05BB:  MOVWF  5D
05BC:  CALL   4F7
....................    printf(lcd_putc,">");  
05BD:  MOVLW  3E
05BE:  MOVWF  5B
05BF:  CALL   51A
05C0:  RETURN
.................... } 
.................... void hienthi_mode(unsigned char select) 
.................... {        
....................    lcd_gotoxy(1, 1); 
*
07B0:  MOVLW  01
07B1:  MOVWF  5C
07B2:  MOVWF  5D
07B3:  CALL   4F7
....................    printf(lcd_putc,"     MANUAL         "); 
07B4:  MOVLW  76
07B5:  BSF    03.6
07B6:  MOVWF  0D
07B7:  MOVLW  00
07B8:  MOVWF  0F
07B9:  BCF    03.6
07BA:  CALL   53E
....................    lcd_gotoxy(1, 2); 
07BB:  MOVLW  01
07BC:  MOVWF  5C
07BD:  MOVLW  02
07BE:  MOVWF  5D
07BF:  CALL   4F7
....................    printf(lcd_putc,"     AUTO           ");    
07C0:  MOVLW  81
07C1:  BSF    03.6
07C2:  MOVWF  0D
07C3:  MOVLW  00
07C4:  MOVWF  0F
07C5:  BCF    03.6
07C6:  CALL   53E
....................    lcd_gotoxy(1,select); 
07C7:  MOVLW  01
07C8:  MOVWF  5C
07C9:  MOVF   4E,W
07CA:  MOVWF  5D
07CB:  CALL   4F7
....................    printf(lcd_putc,">");  
07CC:  MOVLW  3E
07CD:  MOVWF  5B
07CE:  CALL   51A
07CF:  RETURN
.................... } 
.................... void print_select(unsigned char select) 
.................... { 
....................    lcd_gotoxy(1,select); 
....................    printf(lcd_putc,">");  
.................... } 
.................... void xoamanhinh() 
.................... { 
....................    lcd_gotoxy(1, 1); 
*
05C1:  MOVLW  01
05C2:  MOVWF  5C
05C3:  MOVWF  5D
05C4:  CALL   4F7
....................    printf(lcd_putc,"                "); 
05C5:  MOVLW  8C
05C6:  BSF    03.6
05C7:  MOVWF  0D
05C8:  MOVLW  00
05C9:  MOVWF  0F
05CA:  BCF    03.6
05CB:  CALL   53E
....................    lcd_gotoxy(1, 2); 
05CC:  MOVLW  01
05CD:  MOVWF  5C
05CE:  MOVLW  02
05CF:  MOVWF  5D
05D0:  CALL   4F7
....................    printf(lcd_putc,"                ");  
05D1:  MOVLW  95
05D2:  BSF    03.6
05D3:  MOVWF  0D
05D4:  MOVLW  00
05D5:  MOVWF  0F
05D6:  BCF    03.6
05D7:  CALL   53E
05D8:  RETURN
.................... } 
.................... void mode_manual(unsigned char select) 
.................... { 
....................    lcd_gotoxy(1, 1); 
*
07D0:  MOVLW  01
07D1:  MOVWF  5C
07D2:  MOVWF  5D
07D3:  CALL   4F7
....................    printf(lcd_putc,"    -- ON --   "); 
07D4:  MOVLW  9E
07D5:  BSF    03.6
07D6:  MOVWF  0D
07D7:  MOVLW  00
07D8:  MOVWF  0F
07D9:  BCF    03.6
07DA:  CALL   53E
....................    lcd_gotoxy(1, 2); 
07DB:  MOVLW  01
07DC:  MOVWF  5C
07DD:  MOVLW  02
07DE:  MOVWF  5D
07DF:  CALL   4F7
....................    printf(lcd_putc,"    -- OFF --  ");    
07E0:  MOVLW  A6
07E1:  BSF    03.6
07E2:  MOVWF  0D
07E3:  MOVLW  00
07E4:  MOVWF  0F
07E5:  BCF    03.6
07E6:  CALL   53E
....................    lcd_gotoxy(1,select); 
07E7:  MOVLW  01
07E8:  MOVWF  5C
07E9:  MOVF   4E,W
07EA:  MOVWF  5D
07EB:  CALL   4F7
....................    printf(lcd_putc,">");  
07EC:  MOVLW  3E
07ED:  MOVWF  5B
07EE:  CALL   51A
07EF:  RETURN
.................... } 
.................... void luachon_caidat(unsigned char select) 
.................... { 
....................    lcd_gotoxy(0, 1); 
*
098C:  CLRF   5C
098D:  MOVLW  01
098E:  MOVWF  5D
098F:  BCF    0A.3
0990:  CALL   4F7
0991:  BSF    0A.3
....................    printf(lcd_putc,"    -- FAN --  "); 
0992:  MOVLW  AE
0993:  BSF    03.6
0994:  MOVWF  0D
0995:  MOVLW  00
0996:  MOVWF  0F
0997:  BCF    0A.3
0998:  BCF    03.6
0999:  CALL   53E
099A:  BSF    0A.3
....................    lcd_gotoxy(0, 2); 
099B:  CLRF   5C
099C:  MOVLW  02
099D:  MOVWF  5D
099E:  BCF    0A.3
099F:  CALL   4F7
09A0:  BSF    0A.3
....................    printf(lcd_putc,"    -- LED --  ");    
09A1:  MOVLW  B6
09A2:  BSF    03.6
09A3:  MOVWF  0D
09A4:  MOVLW  00
09A5:  MOVWF  0F
09A6:  BCF    0A.3
09A7:  BCF    03.6
09A8:  CALL   53E
09A9:  BSF    0A.3
....................    lcd_gotoxy(1,select); 
09AA:  MOVLW  01
09AB:  MOVWF  5C
09AC:  MOVF   4E,W
09AD:  MOVWF  5D
09AE:  BCF    0A.3
09AF:  CALL   4F7
09B0:  BSF    0A.3
....................    printf(lcd_putc,">");  
09B1:  MOVLW  3E
09B2:  MOVWF  5B
09B3:  BCF    0A.3
09B4:  CALL   51A
09B5:  BSF    0A.3
09B6:  RETURN
.................... } 
....................  
.................... void caidat_fan(unsigned char select) 
.................... { 
....................    lcd_gotoxy(1, 1); 
09B7:  MOVLW  01
09B8:  MOVWF  5C
09B9:  MOVWF  5D
09BA:  BCF    0A.3
09BB:  CALL   4F7
09BC:  BSF    0A.3
....................    printf(lcd_putc,"     TOP:"); 
09BD:  MOVLW  BE
09BE:  BSF    03.6
09BF:  MOVWF  0D
09C0:  MOVLW  00
09C1:  MOVWF  0F
09C2:  BCF    0A.3
09C3:  BCF    03.6
09C4:  CALL   53E
09C5:  BSF    0A.3
....................    lcd_gotoxy(1, 2); 
09C6:  MOVLW  01
09C7:  MOVWF  5C
09C8:  MOVLW  02
09C9:  MOVWF  5D
09CA:  BCF    0A.3
09CB:  CALL   4F7
09CC:  BSF    0A.3
....................    printf(lcd_putc,"     BOT:");    
09CD:  MOVLW  C3
09CE:  BSF    03.6
09CF:  MOVWF  0D
09D0:  MOVLW  00
09D1:  MOVWF  0F
09D2:  BCF    0A.3
09D3:  BCF    03.6
09D4:  CALL   53E
09D5:  BSF    0A.3
....................    lcd_gotoxy(1,select); 
09D6:  MOVLW  01
09D7:  MOVWF  5C
09D8:  MOVF   4E,W
09D9:  MOVWF  5D
09DA:  BCF    0A.3
09DB:  CALL   4F7
09DC:  BSF    0A.3
....................    printf(lcd_putc,">");  
09DD:  MOVLW  3E
09DE:  MOVWF  5B
09DF:  BCF    0A.3
09E0:  CALL   51A
09E1:  BSF    0A.3
09E2:  RETURN
.................... } 
.................... void timerbattat_den(unsigned char select) 
.................... { 
....................    lcd_gotoxy(1, 1); 
*
0B8B:  MOVLW  01
0B8C:  MOVWF  5C
0B8D:  MOVWF  5D
0B8E:  BCF    0A.3
0B8F:  CALL   4F7
0B90:  BSF    0A.3
....................    printf(lcd_putc,"  --TIMER ON--");  
0B91:  MOVLW  C8
0B92:  BSF    03.6
0B93:  MOVWF  0D
0B94:  MOVLW  00
0B95:  MOVWF  0F
0B96:  BCF    0A.3
0B97:  BCF    03.6
0B98:  CALL   53E
0B99:  BSF    0A.3
....................    lcd_gotoxy(1, 2); 
0B9A:  MOVLW  01
0B9B:  MOVWF  5C
0B9C:  MOVLW  02
0B9D:  MOVWF  5D
0B9E:  BCF    0A.3
0B9F:  CALL   4F7
0BA0:  BSF    0A.3
....................    printf(lcd_putc,"  --TIMER OFF--"); 
0BA1:  MOVLW  D0
0BA2:  BSF    03.6
0BA3:  MOVWF  0D
0BA4:  MOVLW  00
0BA5:  MOVWF  0F
0BA6:  BCF    0A.3
0BA7:  BCF    03.6
0BA8:  CALL   53E
0BA9:  BSF    0A.3
....................    lcd_gotoxy(1,select); 
0BAA:  MOVLW  01
0BAB:  MOVWF  5C
0BAC:  MOVF   4F,W
0BAD:  MOVWF  5D
0BAE:  BCF    0A.3
0BAF:  CALL   4F7
0BB0:  BSF    0A.3
....................    printf(lcd_putc,">");  
0BB1:  MOVLW  3E
0BB2:  MOVWF  5B
0BB3:  BCF    0A.3
0BB4:  CALL   51A
0BB5:  BSF    0A.3
0BB6:  RETURN
.................... } 
.................... void caidat_light(unsigned char select) 
.................... { 
....................    if(select==1) 
0BB7:  DECFSZ 4F,W
0BB8:  GOTO   3C9
....................    { 
....................       lcd_gotoxy(1, 1); 
0BB9:  MOVLW  01
0BBA:  MOVWF  5C
0BBB:  MOVWF  5D
0BBC:  BCF    0A.3
0BBD:  CALL   4F7
0BBE:  BSF    0A.3
....................       printf(lcd_putc,"  --TIMER ON--");  
0BBF:  MOVLW  D8
0BC0:  BSF    03.6
0BC1:  MOVWF  0D
0BC2:  MOVLW  00
0BC3:  MOVWF  0F
0BC4:  BCF    0A.3
0BC5:  BCF    03.6
0BC6:  CALL   53E
0BC7:  BSF    0A.3
....................    } 
0BC8:  GOTO   3D8
....................    else  
....................    { 
....................       lcd_gotoxy(1, 1); 
0BC9:  MOVLW  01
0BCA:  MOVWF  5C
0BCB:  MOVWF  5D
0BCC:  BCF    0A.3
0BCD:  CALL   4F7
0BCE:  BSF    0A.3
....................       printf(lcd_putc,"  --TIMER OFF--");  
0BCF:  MOVLW  E0
0BD0:  BSF    03.6
0BD1:  MOVWF  0D
0BD2:  MOVLW  00
0BD3:  MOVWF  0F
0BD4:  BCF    0A.3
0BD5:  BCF    03.6
0BD6:  CALL   53E
0BD7:  BSF    0A.3
....................    } 
....................    lcd_gotoxy(1, 2); 
0BD8:  MOVLW  01
0BD9:  MOVWF  5C
0BDA:  MOVLW  02
0BDB:  MOVWF  5D
0BDC:  BCF    0A.3
0BDD:  CALL   4F7
0BDE:  BSF    0A.3
....................    printf(lcd_putc,"  TIME:"); 
0BDF:  MOVLW  E8
0BE0:  BSF    03.6
0BE1:  MOVWF  0D
0BE2:  MOVLW  00
0BE3:  MOVWF  0F
0BE4:  BCF    0A.3
0BE5:  BCF    03.6
0BE6:  CALL   53E
0BE7:  BSF    0A.3
....................    lcd_gotoxy(15, 2); 
0BE8:  MOVLW  0F
0BE9:  MOVWF  5C
0BEA:  MOVLW  02
0BEB:  MOVWF  5D
0BEC:  BCF    0A.3
0BED:  CALL   4F7
0BEE:  BSF    0A.3
....................    printf(lcd_putc,"m"); 
0BEF:  MOVLW  6D
0BF0:  MOVWF  5B
0BF1:  BCF    0A.3
0BF2:  CALL   51A
0BF3:  BSF    0A.3
0BF4:  RETURN
.................... } 
....................  
.................... void timer_battatden() 
.................... { 
....................    set_timer0(61); 
*
0C3B:  MOVLW  3D
0C3C:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0C3D:  BSF    0B.5
....................    enable_interrupts(GlOBAL); 
0C3E:  MOVLW  C0
0C3F:  IORWF  0B,F
.................... } 
.................... void timer_nhietdo() 
.................... { 
....................    set_timer1(15536); 
*
0594:  CLRF   0E
0595:  MOVLW  3C
0596:  MOVWF  0F
0597:  MOVLW  B0
0598:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1); 
0599:  BSF    03.5
059A:  BSF    0C.0
....................    enable_interrupts(GlOBAL); 
059B:  MOVLW  C0
059C:  BCF    03.5
059D:  IORWF  0B,F
059E:  BCF    0A.3
059F:  BSF    0A.4
05A0:  GOTO   082 (RETURN)
.................... } 
.................... void battatden() 
.................... { 
....................    if(dem1==bien_light && flag == 1 ) 
*
00F2:  MOVF   42,W
00F3:  SUBWF  41,W
00F4:  BTFSS  03.2
00F5:  GOTO   106
00F6:  DECFSZ 32,W
00F7:  GOTO   106
....................    { 
....................       if(flag_battatden==1) 
00F8:  DECFSZ 34,W
00F9:  GOTO   0FF
....................          output_high(PIN_B6); 
00FA:  BSF    03.5
00FB:  BCF    06.6
00FC:  BCF    03.5
00FD:  BSF    06.6
00FE:  GOTO   103
....................       else 
....................          output_low(PIN_B6); 
00FF:  BSF    03.5
0100:  BCF    06.6
0101:  BCF    03.5
0102:  BCF    06.6
....................       dem1 = 0; 
0103:  CLRF   41
....................       flag = 0; 
0104:  CLRF   32
....................    } 
0105:  GOTO   11E
....................    else if(time1==6000 && flag_dasetup ==1 && flag ==1 )  //60s 
0106:  MOVF   2E,W
0107:  SUBLW  70
0108:  BTFSS  03.2
0109:  GOTO   11E
010A:  MOVF   2F,W
010B:  SUBLW  17
010C:  BTFSS  03.2
010D:  GOTO   11E
010E:  DECFSZ 31,W
010F:  GOTO   11E
0110:  DECFSZ 32,W
0111:  GOTO   11E
....................    { 
....................       dem1=dem1+1; 
0112:  MOVLW  01
0113:  ADDWF  41,F
....................       time1 = 0; 
0114:  CLRF   2F
0115:  CLRF   2E
....................       time_light = (time_light>0) ? time_light-1 : 0;  
0116:  MOVF   30,F
0117:  BTFSC  03.2
0118:  GOTO   11C
0119:  MOVLW  01
011A:  SUBWF  30,W
011B:  GOTO   11D
011C:  MOVLW  00
011D:  MOVWF  30
....................    }  
.................... } 
.................... int time2 = 0; 
.................... int time3 = 0; 
.................... int count = 0; 
.................... int count1 = 0; 
.................... int count2 = 0; 
.................... void delaytimer_1s_onofffan() 
.................... { 
....................    if(lockquat==1) 
....................    { 
....................       if(time3==100) 
....................       { 
....................          if(Nhietdo>=Nguongnhietdo.BOT && Nhietdo<=Nguongnhietdo.TOP) 
....................          { 
....................             count = count + 1; 
....................             time3 = 0; 
....................          } 
....................          else if(Nhietdo<Nguongnhietdo.BOT) 
....................          { 
....................             count1 = count1 + 1; 
....................             time3 = 0; 
....................          } 
....................          else if(Nhietdo>Nguongnhietdo.TOP) 
....................          { 
....................             count2 = count2 + 1; 
....................             time3 = 0; 
....................          }       
....................       }    
....................    } 
.................... } 
.................... void delaytimer_2s() 
.................... { 
....................    if(time2==200) 
*
027F:  MOVF   47,W
0280:  SUBLW  C8
0281:  BTFSS  03.2
0282:  GOTO   2FB
....................    { 
....................       GiatriADC = read_adc(); 
0283:  BSF    1F.2
0284:  BTFSC  1F.2
0285:  GOTO   284
0286:  MOVF   1E,W
0287:  MOVWF  7A
0288:  BSF    03.5
0289:  MOVF   1E,W
028A:  BCF    03.5
028B:  MOVWF  68
028C:  MOVF   7A,W
028D:  MOVWF  69
*
02AA:  MOVF   7A,W
02AB:  MOVWF  3C
02AC:  MOVF   79,W
02AD:  MOVWF  3B
02AE:  MOVF   78,W
02AF:  MOVWF  3A
02B0:  MOVF   77,W
02B1:  MOVWF  39
....................       Tam = GiatriADC*5/1023.0f; 
02B2:  MOVF   3C,W
02B3:  MOVWF  6B
02B4:  MOVF   3B,W
02B5:  MOVWF  6A
02B6:  MOVF   3A,W
02B7:  MOVWF  69
02B8:  MOVF   39,W
02B9:  MOVWF  68
02BA:  CLRF   6F
02BB:  CLRF   6E
02BC:  MOVLW  20
02BD:  MOVWF  6D
02BE:  MOVLW  81
02BF:  MOVWF  6C
02C0:  CALL   122
02C1:  MOVF   7A,W
02C2:  MOVWF  6B
02C3:  MOVF   79,W
02C4:  MOVWF  6A
02C5:  MOVF   78,W
02C6:  MOVWF  69
02C7:  MOVF   77,W
02C8:  MOVWF  68
02C9:  MOVF   7A,W
02CA:  MOVWF  6F
02CB:  MOVF   79,W
02CC:  MOVWF  6E
02CD:  MOVF   78,W
02CE:  MOVWF  6D
02CF:  MOVF   77,W
02D0:  MOVWF  6C
02D1:  CLRF   73
02D2:  MOVLW  C0
02D3:  MOVWF  72
02D4:  MOVLW  7F
02D5:  MOVWF  71
02D6:  MOVLW  88
02D7:  MOVWF  70
02D8:  CALL   197
02D9:  MOVF   7A,W
02DA:  MOVWF  38
02DB:  MOVF   79,W
02DC:  MOVWF  37
02DD:  MOVF   78,W
02DE:  MOVWF  36
02DF:  MOVF   77,W
02E0:  MOVWF  35
....................       Nhietdo = Tam/0.01;  
02E1:  MOVF   38,W
02E2:  MOVWF  6F
02E3:  MOVF   37,W
02E4:  MOVWF  6E
02E5:  MOVF   36,W
02E6:  MOVWF  6D
02E7:  MOVF   35,W
02E8:  MOVWF  6C
02E9:  MOVLW  0A
02EA:  MOVWF  73
02EB:  MOVLW  D7
02EC:  MOVWF  72
02ED:  MOVLW  23
02EE:  MOVWF  71
02EF:  MOVLW  78
02F0:  MOVWF  70
02F1:  CALL   197
02F2:  MOVF   7A,W
02F3:  MOVWF  40
02F4:  MOVF   79,W
02F5:  MOVWF  3F
02F6:  MOVF   78,W
02F7:  MOVWF  3E
02F8:  MOVF   77,W
02F9:  MOVWF  3D
....................       time2=0; 
02FA:  CLRF   47
....................    } 
.................... } 
....................  
.................... #int_TIMER0 
.................... void TIMER0_isr()  
.................... { 
....................    set_timer0(61);   //10ms 
*
00EC:  MOVLW  3D
00ED:  MOVWF  01
....................    time1 = time1 +1; 
00EE:  MOVLW  01
00EF:  ADDWF  2E,F
00F0:  BTFSC  03.0
00F1:  INCF   2F,F
....................    battatden(); 
.................... } 
....................  
*
011E:  BCF    0B.2
011F:  BCF    0A.3
0120:  BCF    0A.4
0121:  GOTO   031
.................... #int_TIMER1 
.................... void TIMER1_isr()  
.................... { 
....................    set_timer1(15536);   //10ms 
*
0278:  CLRF   0E
0279:  MOVLW  3C
027A:  MOVWF  0F
027B:  MOVLW  B0
027C:  MOVWF  0E
....................    time2 = time2 +1; 
027D:  MOVLW  01
027E:  ADDWF  47,F
....................    //time3 = time3 +1; 
....................    delaytimer_2s(); 
....................    //delaytimer_1s_onofffan(); 
*
02FB:  BCF    0C.0
02FC:  BCF    0A.3
02FD:  BCF    0A.4
02FE:  GOTO   031
.................... } 
....................  
.................... void delaytimer0_10ms(void) 
.................... { 
....................    set_timer0(0); 
....................    while(get_timer0()<195); 
....................    time = time + 1; 
.................... } 
.................... int a =0; 
.................... void display_onoff() 
.................... { 
....................     
....................     if(input_state(PIN_B7)==1) 
*
05D9:  BTFSS  06.7
05DA:  GOTO   5E8
....................     { 
....................       lcd_gotoxy(2, 1); 
05DB:  MOVLW  02
05DC:  MOVWF  5C
05DD:  MOVLW  01
05DE:  MOVWF  5D
05DF:  CALL   4F7
....................       printf(lcd_putc,"F1:ON ");            
05E0:  MOVLW  FF
05E1:  BSF    03.6
05E2:  MOVWF  0D
05E3:  MOVLW  02
05E4:  MOVWF  0F
05E5:  BCF    03.6
05E6:  CALL   53E
....................     } 
05E7:  GOTO   5F4
....................     else 
....................     { 
....................       lcd_gotoxy(2, 1); 
05E8:  MOVLW  02
05E9:  MOVWF  5C
05EA:  MOVLW  01
05EB:  MOVWF  5D
05EC:  CALL   4F7
....................       printf(lcd_putc,"F1:OFF");           
05ED:  MOVLW  03
05EE:  BSF    03.6
05EF:  MOVWF  0D
05F0:  MOVLW  03
05F1:  MOVWF  0F
05F2:  BCF    03.6
05F3:  CALL   53E
....................     } 
....................     if(input_state(PIN_C1)==1) 
05F4:  BTFSS  07.1
05F5:  GOTO   603
....................     { 
....................       lcd_gotoxy(10, 1); 
05F6:  MOVLW  0A
05F7:  MOVWF  5C
05F8:  MOVLW  01
05F9:  MOVWF  5D
05FA:  CALL   4F7
....................       printf(lcd_putc,"F2:ON ");            
05FB:  MOVLW  07
05FC:  BSF    03.6
05FD:  MOVWF  0D
05FE:  MOVLW  03
05FF:  MOVWF  0F
0600:  BCF    03.6
0601:  CALL   53E
....................     } 
0602:  GOTO   60F
....................     else 
....................     { 
....................       lcd_gotoxy(10, 1); 
0603:  MOVLW  0A
0604:  MOVWF  5C
0605:  MOVLW  01
0606:  MOVWF  5D
0607:  CALL   4F7
....................       printf(lcd_putc,"F2:OFF");           
0608:  MOVLW  0B
0609:  BSF    03.6
060A:  MOVWF  0D
060B:  MOVLW  03
060C:  MOVWF  0F
060D:  BCF    03.6
060E:  CALL   53E
....................     } 
....................     if(input_state(PIN_B6)==1) 
060F:  BTFSS  06.6
0610:  GOTO   61D
....................     { 
....................       lcd_gotoxy(2, 2); 
0611:  MOVLW  02
0612:  MOVWF  5C
0613:  MOVWF  5D
0614:  CALL   4F7
....................       printf(lcd_putc,"L:ON ");             
0615:  MOVLW  0F
0616:  BSF    03.6
0617:  MOVWF  0D
0618:  MOVLW  03
0619:  MOVWF  0F
061A:  BCF    03.6
061B:  CALL   53E
....................     } 
061C:  GOTO   628
....................     else 
....................     { 
....................       lcd_gotoxy(2, 2); 
061D:  MOVLW  02
061E:  MOVWF  5C
061F:  MOVWF  5D
0620:  CALL   4F7
....................       printf(lcd_putc,"L:OFF");               
0621:  MOVLW  12
0622:  BSF    03.6
0623:  MOVWF  0D
0624:  MOVLW  03
0625:  MOVWF  0F
0626:  BCF    03.6
0627:  CALL   53E
....................     } 
0628:  BCF    0A.3
0629:  BSF    0A.4
062A:  GOTO   0C5 (RETURN)
.................... } 
....................  
.................... void bat_tat_quat(int top,int bot) 
.................... { 
....................    if(Nhietdo>top) 
*
06C3:  CLRF   69
06C4:  MOVF   4E,W
06C5:  MOVWF  68
*
06E2:  MOVF   7A,W
06E3:  MOVWF  53
06E4:  MOVF   79,W
06E5:  MOVWF  52
06E6:  MOVF   78,W
06E7:  MOVWF  51
06E8:  MOVF   77,W
06E9:  MOVWF  50
06EA:  MOVF   40,W
06EB:  MOVWF  57
06EC:  MOVF   3F,W
06ED:  MOVWF  56
06EE:  MOVF   3E,W
06EF:  MOVWF  55
06F0:  MOVF   3D,W
06F1:  MOVWF  54
06F2:  CALL   684
06F3:  BTFSS  03.0
06F4:  GOTO   700
....................    { 
....................       output_high(PIN_B7); 
06F5:  BSF    03.5
06F6:  BCF    06.7
06F7:  BCF    03.5
06F8:  BSF    06.7
....................       output_high(PIN_C1); 
06F9:  BCF    4D.1
06FA:  MOVF   4D,W
06FB:  BSF    03.5
06FC:  MOVWF  07
06FD:  BCF    03.5
06FE:  BSF    07.1
....................       //count2 = 0; 
....................    } 
06FF:  GOTO   7AF
....................    else if(Nhietdo>=bot && Nhietdo<=top) 
0700:  CLRF   69
0701:  MOVF   4F,W
0702:  MOVWF  68
*
071F:  MOVF   7A,W
0720:  MOVWF  53
0721:  MOVF   79,W
0722:  MOVWF  52
0723:  MOVF   78,W
0724:  MOVWF  51
0725:  MOVF   77,W
0726:  MOVWF  50
0727:  MOVF   40,W
0728:  MOVWF  57
0729:  MOVF   3F,W
072A:  MOVWF  56
072B:  MOVF   3E,W
072C:  MOVWF  55
072D:  MOVF   3D,W
072E:  MOVWF  54
072F:  CALL   684
0730:  BTFSC  03.0
0731:  GOTO   734
0732:  BTFSS  03.2
0733:  GOTO   773
0734:  CLRF   69
0735:  MOVF   4E,W
0736:  MOVWF  68
*
0753:  MOVF   40,W
0754:  MOVWF  53
0755:  MOVF   3F,W
0756:  MOVWF  52
0757:  MOVF   3E,W
0758:  MOVWF  51
0759:  MOVF   3D,W
075A:  MOVWF  50
075B:  MOVF   7A,W
075C:  MOVWF  57
075D:  MOVF   79,W
075E:  MOVWF  56
075F:  MOVF   78,W
0760:  MOVWF  55
0761:  MOVF   77,W
0762:  MOVWF  54
0763:  CALL   684
0764:  BTFSC  03.0
0765:  GOTO   768
0766:  BTFSS  03.2
0767:  GOTO   773
....................    { 
....................       output_high(PIN_B7); 
0768:  BSF    03.5
0769:  BCF    06.7
076A:  BCF    03.5
076B:  BSF    06.7
....................       output_low(PIN_C1); 
076C:  BCF    4D.1
076D:  MOVF   4D,W
076E:  BSF    03.5
076F:  MOVWF  07
0770:  BCF    03.5
0771:  BCF    07.1
....................       //count = 0; 
....................    } 
0772:  GOTO   7AF
....................    else if(Nhietdo<bot) 
0773:  CLRF   69
0774:  MOVF   4F,W
0775:  MOVWF  68
*
0792:  MOVF   40,W
0793:  MOVWF  53
0794:  MOVF   3F,W
0795:  MOVWF  52
0796:  MOVF   3E,W
0797:  MOVWF  51
0798:  MOVF   3D,W
0799:  MOVWF  50
079A:  MOVF   7A,W
079B:  MOVWF  57
079C:  MOVF   79,W
079D:  MOVWF  56
079E:  MOVF   78,W
079F:  MOVWF  55
07A0:  MOVF   77,W
07A1:  MOVWF  54
07A2:  CALL   684
07A3:  BTFSS  03.0
07A4:  GOTO   7AF
....................    { 
....................       //output_low(PIN_B7); 
....................       output_bit(PIN_B7,0); 
07A5:  BCF    06.7
07A6:  BSF    03.5
07A7:  BCF    06.7
....................       output_low(PIN_C1); 
07A8:  BCF    03.5
07A9:  BCF    4D.1
07AA:  MOVF   4D,W
07AB:  BSF    03.5
07AC:  MOVWF  07
07AD:  BCF    03.5
07AE:  BCF    07.1
....................       //count1 =0; 
....................    } 
07AF:  RETURN
.................... } 
.................... void xuli_FAN(void) 
.................... { 
....................    while(TRUE) 
....................    { 
....................       bat_tat_quat(Nguongnhietdo.TOP,Nguongnhietdo.BOT); 
*
0A69:  MOVF   45,W
0A6A:  MOVWF  4E
0A6B:  MOVF   46,W
0A6C:  MOVWF  4F
0A6D:  BCF    0A.3
0A6E:  CALL   6C3
0A6F:  BSF    0A.3
....................       delay_MS(100); 
0A70:  MOVLW  64
0A71:  MOVWF  5C
0A72:  BCF    0A.3
0A73:  CALL   34E
0A74:  BSF    0A.3
....................       if(UP==0) 
0A75:  BSF    03.5
0A76:  BSF    06.0
0A77:  BCF    03.5
0A78:  BTFSC  06.0
0A79:  GOTO   28A
....................       { 
....................          while(UP==0); 
0A7A:  BSF    03.5
0A7B:  BSF    06.0
0A7C:  BCF    03.5
0A7D:  BTFSS  06.0
0A7E:  GOTO   27A
....................          select = (select == 1)? 2: select-1; 
0A7F:  DECFSZ 2C,W
0A80:  GOTO   283
0A81:  MOVLW  02
0A82:  GOTO   285
0A83:  MOVLW  01
0A84:  SUBWF  2C,W
0A85:  MOVWF  2C
....................          caidat_fan(select); 
0A86:  MOVF   2C,W
0A87:  MOVWF  4E
0A88:  CALL   1B7
....................       } 
0A89:  GOTO   2A0
....................       else if(DOWN==0) 
0A8A:  BSF    03.5
0A8B:  BSF    06.1
0A8C:  BCF    03.5
0A8D:  BTFSC  06.1
0A8E:  GOTO   2A0
....................       { 
....................          while(DOWN==0); 
0A8F:  BSF    03.5
0A90:  BSF    06.1
0A91:  BCF    03.5
0A92:  BTFSS  06.1
0A93:  GOTO   28F
....................          select = (select == 2)? 1: select+1; 
0A94:  MOVF   2C,W
0A95:  SUBLW  02
0A96:  BTFSS  03.2
0A97:  GOTO   29A
0A98:  MOVLW  01
0A99:  GOTO   29C
0A9A:  MOVLW  01
0A9B:  ADDWF  2C,W
0A9C:  MOVWF  2C
....................          caidat_fan(select); 
0A9D:  MOVF   2C,W
0A9E:  MOVWF  4E
0A9F:  CALL   1B7
....................       } 
....................       if(OK==0 && select == 1)  //CHONTOP 
0AA0:  BSF    03.5
0AA1:  BSF    06.2
0AA2:  BCF    03.5
0AA3:  BTFSC  06.2
0AA4:  GOTO   30A
0AA5:  DECFSZ 2C,W
0AA6:  GOTO   30A
....................       { 
....................          while(OK==0); 
0AA7:  BSF    03.5
0AA8:  BSF    06.2
0AA9:  BCF    03.5
0AAA:  BTFSS  06.2
0AAB:  GOTO   2A7
....................          lcd_gotoxy(16, 1); 
0AAC:  MOVLW  10
0AAD:  MOVWF  5C
0AAE:  MOVLW  01
0AAF:  MOVWF  5D
0AB0:  BCF    0A.3
0AB1:  CALL   4F7
0AB2:  BSF    0A.3
....................          lcd_putc("*"); 
0AB3:  MOVLW  15
0AB4:  BSF    03.6
0AB5:  MOVWF  0D
0AB6:  MOVLW  03
0AB7:  MOVWF  0F
0AB8:  BCF    0A.3
0AB9:  BCF    03.6
0ABA:  CALL   53E
0ABB:  BSF    0A.3
....................          while(TRUE) 
....................          { 
....................             if(UP==0) 
0ABC:  BSF    03.5
0ABD:  BSF    06.0
0ABE:  BCF    03.5
0ABF:  BTFSC  06.0
0AC0:  GOTO   2D5
....................             { 
....................                while(UP==0); 
0AC1:  BSF    03.5
0AC2:  BSF    06.0
0AC3:  BCF    03.5
0AC4:  BTFSS  06.0
0AC5:  GOTO   2C1
....................                 lcd_gotoxy(12, 1); 
0AC6:  MOVLW  0C
0AC7:  MOVWF  5C
0AC8:  MOVLW  01
0AC9:  MOVWF  5D
0ACA:  BCF    0A.3
0ACB:  CALL   4F7
0ACC:  BSF    0A.3
....................                 printf(lcd_putc,"%3d",Nguongnhietdo.TOP  = Nguongnhietdo.TOP +1); 
0ACD:  MOVLW  01
0ACE:  ADDWF  45,F
0ACF:  MOVF   45,W
0AD0:  MOVWF  4F
0AD1:  MOVLW  13
0AD2:  MOVWF  50
0AD3:  CALL   1E3
....................             } 
0AD4:  GOTO   309
....................             else if(DOWN==0) 
0AD5:  BSF    03.5
0AD6:  BSF    06.1
0AD7:  BCF    03.5
0AD8:  BTFSC  06.1
0AD9:  GOTO   2EE
....................             { 
....................                while(DOWN==0); 
0ADA:  BSF    03.5
0ADB:  BSF    06.1
0ADC:  BCF    03.5
0ADD:  BTFSS  06.1
0ADE:  GOTO   2DA
....................                 lcd_gotoxy(12, 1); 
0ADF:  MOVLW  0C
0AE0:  MOVWF  5C
0AE1:  MOVLW  01
0AE2:  MOVWF  5D
0AE3:  BCF    0A.3
0AE4:  CALL   4F7
0AE5:  BSF    0A.3
....................                 printf(lcd_putc,"%3d",Nguongnhietdo.TOP  = Nguongnhietdo.TOP -1); 
0AE6:  MOVLW  01
0AE7:  SUBWF  45,F
0AE8:  MOVF   45,W
0AE9:  MOVWF  4F
0AEA:  MOVLW  13
0AEB:  MOVWF  50
0AEC:  CALL   1E3
....................             } 
0AED:  GOTO   309
....................             else if(OK==0) 
0AEE:  BSF    03.5
0AEF:  BSF    06.2
0AF0:  BCF    03.5
0AF1:  BTFSC  06.2
0AF2:  GOTO   309
....................             { 
....................                while(OK==0); 
0AF3:  BSF    03.5
0AF4:  BSF    06.2
0AF5:  BCF    03.5
0AF6:  BTFSS  06.2
0AF7:  GOTO   2F3
....................                lcd_gotoxy(16, 1); 
0AF8:  MOVLW  10
0AF9:  MOVWF  5C
0AFA:  MOVLW  01
0AFB:  MOVWF  5D
0AFC:  BCF    0A.3
0AFD:  CALL   4F7
0AFE:  BSF    0A.3
....................                lcd_putc(" "); 
0AFF:  MOVLW  16
0B00:  BSF    03.6
0B01:  MOVWF  0D
0B02:  MOVLW  03
0B03:  MOVWF  0F
0B04:  BCF    0A.3
0B05:  BCF    03.6
0B06:  CALL   53E
0B07:  BSF    0A.3
....................                break;      
0B08:  GOTO   30A
....................             } 
0B09:  GOTO   2BC
....................          } 
....................       } 
....................       if(OK==0 && select == 2) //CHONBOT 
0B0A:  BSF    03.5
0B0B:  BSF    06.2
0B0C:  BCF    03.5
0B0D:  BTFSC  06.2
0B0E:  GOTO   376
0B0F:  MOVF   2C,W
0B10:  SUBLW  02
0B11:  BTFSS  03.2
0B12:  GOTO   376
....................       { 
....................          while(OK==0); 
0B13:  BSF    03.5
0B14:  BSF    06.2
0B15:  BCF    03.5
0B16:  BTFSS  06.2
0B17:  GOTO   313
....................          lcd_gotoxy(16, 2); 
0B18:  MOVLW  10
0B19:  MOVWF  5C
0B1A:  MOVLW  02
0B1B:  MOVWF  5D
0B1C:  BCF    0A.3
0B1D:  CALL   4F7
0B1E:  BSF    0A.3
....................          lcd_putc("*"); 
0B1F:  MOVLW  17
0B20:  BSF    03.6
0B21:  MOVWF  0D
0B22:  MOVLW  03
0B23:  MOVWF  0F
0B24:  BCF    0A.3
0B25:  BCF    03.6
0B26:  CALL   53E
0B27:  BSF    0A.3
....................          while(TRUE) 
....................          { 
....................             if(UP==0) 
0B28:  BSF    03.5
0B29:  BSF    06.0
0B2A:  BCF    03.5
0B2B:  BTFSC  06.0
0B2C:  GOTO   341
....................             { 
....................                while(UP==0); 
0B2D:  BSF    03.5
0B2E:  BSF    06.0
0B2F:  BCF    03.5
0B30:  BTFSS  06.0
0B31:  GOTO   32D
....................                 lcd_gotoxy(12, 2); 
0B32:  MOVLW  0C
0B33:  MOVWF  5C
0B34:  MOVLW  02
0B35:  MOVWF  5D
0B36:  BCF    0A.3
0B37:  CALL   4F7
0B38:  BSF    0A.3
....................                 printf(lcd_putc,"%3d",Nguongnhietdo.BOT  = Nguongnhietdo.BOT +1); 
0B39:  MOVLW  01
0B3A:  ADDWF  46,F
0B3B:  MOVF   46,W
0B3C:  MOVWF  4F
0B3D:  MOVLW  13
0B3E:  MOVWF  50
0B3F:  CALL   1E3
....................             } 
0B40:  GOTO   375
....................             else if(DOWN==0) 
0B41:  BSF    03.5
0B42:  BSF    06.1
0B43:  BCF    03.5
0B44:  BTFSC  06.1
0B45:  GOTO   35A
....................             { 
....................                while(DOWN==0); 
0B46:  BSF    03.5
0B47:  BSF    06.1
0B48:  BCF    03.5
0B49:  BTFSS  06.1
0B4A:  GOTO   346
....................                 lcd_gotoxy(12, 2); 
0B4B:  MOVLW  0C
0B4C:  MOVWF  5C
0B4D:  MOVLW  02
0B4E:  MOVWF  5D
0B4F:  BCF    0A.3
0B50:  CALL   4F7
0B51:  BSF    0A.3
....................                 printf(lcd_putc,"%3d",Nguongnhietdo.BOT  = Nguongnhietdo.BOT -1); 
0B52:  MOVLW  01
0B53:  SUBWF  46,F
0B54:  MOVF   46,W
0B55:  MOVWF  4F
0B56:  MOVLW  13
0B57:  MOVWF  50
0B58:  CALL   1E3
....................             }  
0B59:  GOTO   375
....................             else if(OK==0) 
0B5A:  BSF    03.5
0B5B:  BSF    06.2
0B5C:  BCF    03.5
0B5D:  BTFSC  06.2
0B5E:  GOTO   375
....................             { 
....................                while(OK==0); 
0B5F:  BSF    03.5
0B60:  BSF    06.2
0B61:  BCF    03.5
0B62:  BTFSS  06.2
0B63:  GOTO   35F
....................                lcd_gotoxy(16, 2); 
0B64:  MOVLW  10
0B65:  MOVWF  5C
0B66:  MOVLW  02
0B67:  MOVWF  5D
0B68:  BCF    0A.3
0B69:  CALL   4F7
0B6A:  BSF    0A.3
....................                lcd_putc(" "); 
0B6B:  MOVLW  18
0B6C:  BSF    03.6
0B6D:  MOVWF  0D
0B6E:  MOVLW  03
0B6F:  MOVWF  0F
0B70:  BCF    0A.3
0B71:  BCF    03.6
0B72:  CALL   53E
0B73:  BSF    0A.3
....................                break; 
0B74:  GOTO   376
....................             } 
0B75:  GOTO   328
....................          }                            
....................       } 
....................       if(BACK==0) 
0B76:  BSF    03.5
0B77:  BSF    06.3
0B78:  BCF    03.5
0B79:  BTFSC  06.3
0B7A:  GOTO   387
....................       { 
....................          while(BACK==0); 
0B7B:  BSF    03.5
0B7C:  BSF    06.3
0B7D:  BCF    03.5
0B7E:  BTFSS  06.3
0B7F:  GOTO   37B
....................          xoamanhinh(); 
0B80:  BCF    0A.3
0B81:  CALL   5C1
0B82:  BSF    0A.3
....................          luachon_caidat(select); 
0B83:  MOVF   2C,W
0B84:  MOVWF  4E
0B85:  CALL   18C
....................          break; 
0B86:  GOTO   388
....................       } 
0B87:  GOTO   269
....................    } 
0B88:  BCF    0A.3
0B89:  BSF    0A.4
0B8A:  GOTO   476 (RETURN)
.................... } 
.................... void xuli_LIGHT(unsigned char select) 
.................... { 
....................    while(TRUE) 
....................    {                     
....................       if(UP==0) 
*
0BF5:  BSF    03.5
0BF6:  BSF    06.0
0BF7:  BCF    03.5
0BF8:  BTFSC  06.0
0BF9:  GOTO   40E
....................       { 
....................          while(UP==0); 
0BFA:  BSF    03.5
0BFB:  BSF    06.0
0BFC:  BCF    03.5
0BFD:  BTFSS  06.0
0BFE:  GOTO   3FA
....................           lcd_gotoxy(10, 2); 
0BFF:  MOVLW  0A
0C00:  MOVWF  5C
0C01:  MOVLW  02
0C02:  MOVWF  5D
0C03:  BCF    0A.3
0C04:  CALL   4F7
0C05:  BSF    0A.3
....................           printf(lcd_putc,"%3d",time_light = time_light+1); 
0C06:  MOVLW  01
0C07:  ADDWF  30,F
0C08:  MOVF   30,W
0C09:  MOVWF  4F
0C0A:  MOVLW  13
0C0B:  MOVWF  50
0C0C:  CALL   1E3
....................       } 
0C0D:  GOTO   47A
....................       else if(DOWN==0) 
0C0E:  BSF    03.5
0C0F:  BSF    06.1
0C10:  BCF    03.5
0C11:  BTFSC  06.1
0C12:  GOTO   42C
....................       { 
....................          while(DOWN==0); 
0C13:  BSF    03.5
0C14:  BSF    06.1
0C15:  BCF    03.5
0C16:  BTFSS  06.1
0C17:  GOTO   413
....................           lcd_gotoxy(10, 2); 
0C18:  MOVLW  0A
0C19:  MOVWF  5C
0C1A:  MOVLW  02
0C1B:  MOVWF  5D
0C1C:  BCF    0A.3
0C1D:  CALL   4F7
0C1E:  BSF    0A.3
....................           printf(lcd_putc,"%3d",time_light = (time_light>0) ? time_light-1 : 0); 
0C1F:  MOVF   30,F
0C20:  BTFSC  03.2
0C21:  GOTO   425
0C22:  MOVLW  01
0C23:  SUBWF  30,W
0C24:  GOTO   426
0C25:  MOVLW  00
0C26:  MOVWF  30
0C27:  MOVWF  4F
0C28:  MOVLW  13
0C29:  MOVWF  50
0C2A:  CALL   1E3
....................       }         
0C2B:  GOTO   47A
....................       else if(OK==0) 
0C2C:  BSF    03.5
0C2D:  BSF    06.2
0C2E:  BCF    03.5
0C2F:  BTFSC  06.2
0C30:  GOTO   445
....................       { 
....................          while(OK==0); 
0C31:  BSF    03.5
0C32:  BSF    06.2
0C33:  BCF    03.5
0C34:  BTFSS  06.2
0C35:  GOTO   431
....................          caidat_light(select); 
0C36:  MOVF   4E,W
0C37:  MOVWF  4F
0C38:  CALL   3B7
....................          bien_light = time_light; 
0C39:  MOVF   30,W
0C3A:  MOVWF  42
....................          timer_battatden(); 
....................          flag = 1; 
*
0C40:  MOVLW  01
0C41:  MOVWF  32
....................          time1 = 0; 
0C42:  CLRF   2F
0C43:  CLRF   2E
....................       } 
0C44:  GOTO   47A
....................       else if(time1==6000 && flag ==1)  //1m 
0C45:  MOVF   2E,W
0C46:  SUBLW  70
0C47:  BTFSS  03.2
0C48:  GOTO   467
0C49:  MOVF   2F,W
0C4A:  SUBLW  17
0C4B:  BTFSS  03.2
0C4C:  GOTO   467
0C4D:  DECFSZ 32,W
0C4E:  GOTO   467
....................        { 
....................          dem1=dem1+1; 
0C4F:  MOVLW  01
0C50:  ADDWF  41,F
....................          time1 = 0; 
0C51:  CLRF   2F
0C52:  CLRF   2E
....................          lcd_gotoxy(10, 2); 
0C53:  MOVLW  0A
0C54:  MOVWF  5C
0C55:  MOVLW  02
0C56:  MOVWF  5D
0C57:  BCF    0A.3
0C58:  CALL   4F7
0C59:  BSF    0A.3
....................          printf(lcd_putc,"%3d",time_light = (time_light>0) ? time_light-1 : 0);   
0C5A:  MOVF   30,F
0C5B:  BTFSC  03.2
0C5C:  GOTO   460
0C5D:  MOVLW  01
0C5E:  SUBWF  30,W
0C5F:  GOTO   461
0C60:  MOVLW  00
0C61:  MOVWF  30
0C62:  MOVWF  4F
0C63:  MOVLW  13
0C64:  MOVWF  50
0C65:  CALL   1E3
....................       }                         
0C66:  GOTO   47A
....................       else if(BACK==0) 
0C67:  BSF    03.5
0C68:  BSF    06.3
0C69:  BCF    03.5
0C6A:  BTFSC  06.3
0C6B:  GOTO   47A
....................       { 
....................          while(BACK==0); 
0C6C:  BSF    03.5
0C6D:  BSF    06.3
0C6E:  BCF    03.5
0C6F:  BTFSS  06.3
0C70:  GOTO   46C
....................          xoamanhinh(); 
0C71:  BCF    0A.3
0C72:  CALL   5C1
0C73:  BSF    0A.3
....................          timerbattat_den(select); 
0C74:  MOVF   4E,W
0C75:  MOVWF  4F
0C76:  CALL   38B
....................          flag_dasetup = 1;      
0C77:  MOVLW  01
0C78:  MOVWF  31
....................          break; 
0C79:  GOTO   47B
....................       } 
0C7A:  GOTO   3F5
....................    } 
0C7B:  RETURN
.................... } 
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  01
1004:  MOVWF  2C
1005:  CLRF   2D
1006:  CLRF   2F
1007:  CLRF   2E
1008:  CLRF   30
1009:  CLRF   31
100A:  MOVWF  32
100B:  CLRF   33
100C:  CLRF   34
100D:  CLRF   41
100E:  CLRF   43
100F:  CLRF   44
1010:  CLRF   47
1011:  CLRF   48
1012:  CLRF   49
1013:  CLRF   4A
1014:  CLRF   4B
1015:  CLRF   4C
1016:  MOVLW  FF
1017:  MOVWF  4D
1018:  BSF    03.5
1019:  BSF    1F.0
101A:  BSF    1F.1
101B:  BSF    1F.2
101C:  BCF    1F.3
101D:  MOVLW  07
101E:  MOVWF  1C
101F:  BCF    03.7
.................... { 
....................    lcd_init(); 
*
1025:  BCF    0A.4
1026:  GOTO   46B
1027:  BSF    0A.4
....................    lcd_gotoxy(1, 1); 
1028:  MOVLW  01
1029:  MOVWF  5C
102A:  MOVWF  5D
102B:  BCF    0A.4
102C:  CALL   4F7
102D:  BSF    0A.4
....................    printf(lcd_putc,"     DISPLAY"); 
102E:  MOVLW  19
102F:  BSF    03.6
1030:  MOVWF  0D
1031:  MOVLW  03
1032:  MOVWF  0F
1033:  BCF    0A.4
1034:  BCF    03.6
1035:  CALL   53E
1036:  BSF    0A.4
....................    lcd_gotoxy(1, 2); 
1037:  MOVLW  01
1038:  MOVWF  5C
1039:  MOVLW  02
103A:  MOVWF  5D
103B:  BCF    0A.4
103C:  CALL   4F7
103D:  BSF    0A.4
....................    printf(lcd_putc,"     SETTING"); 
103E:  MOVLW  20
103F:  BSF    03.6
1040:  MOVWF  0D
1041:  MOVLW  03
1042:  MOVWF  0F
1043:  BCF    0A.4
1044:  BCF    03.6
1045:  CALL   53E
1046:  BSF    0A.4
....................    lcd_gotoxy(1,1); 
1047:  MOVLW  01
1048:  MOVWF  5C
1049:  MOVWF  5D
104A:  BCF    0A.4
104B:  CALL   4F7
104C:  BSF    0A.4
....................    printf(lcd_putc,">");  
104D:  MOVLW  3E
104E:  MOVWF  5B
104F:  BCF    0A.4
1050:  CALL   51A
1051:  BSF    0A.4
....................    setup_timer_0(T0_INTERNAL|T0_DIV_256); 
1052:  BSF    03.5
1053:  MOVF   01,W
1054:  ANDLW  C0
1055:  IORLW  07
1056:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1057:  MOVLW  85
1058:  BCF    03.5
1059:  MOVWF  10
....................    setup_adc(ADC_CLOCK_INTERNAL); 
105A:  BSF    03.5
105B:  BCF    1F.6
105C:  BCF    03.5
105D:  BSF    1F.6
105E:  BSF    1F.7
105F:  BSF    03.5
1060:  BSF    1F.7
1061:  BCF    03.5
1062:  BSF    1F.0
....................    setup_adc(AN0_AN1_VSS_VREF); 
1063:  BSF    03.5
1064:  BCF    1F.6
1065:  BCF    03.5
1066:  BCF    1F.6
1067:  BCF    1F.7
1068:  BSF    03.5
1069:  BSF    1F.7
106A:  BCF    03.5
106B:  BSF    1F.0
....................    set_adc_channel(0); 
106C:  MOVLW  00
106D:  MOVWF  78
106E:  MOVF   1F,W
106F:  ANDLW  C7
1070:  IORWF  78,W
1071:  MOVWF  1F
....................    output_low(PIN_B6);  
1072:  BSF    03.5
1073:  BCF    06.6
1074:  BCF    03.5
1075:  BCF    06.6
....................    output_low(PIN_B7);  
1076:  BSF    03.5
1077:  BCF    06.7
1078:  BCF    03.5
1079:  BCF    06.7
....................    output_low(PIN_C1);  
107A:  BCF    4D.1
107B:  MOVF   4D,W
107C:  BSF    03.5
107D:  MOVWF  07
107E:  BCF    03.5
107F:  BCF    07.1
....................    timer_nhietdo();   
1080:  BCF    0A.4
1081:  GOTO   594
1082:  BSF    0A.4
....................    while(TRUE) 
....................    { 
....................       if(UP==0) 
1083:  BSF    03.5
1084:  BSF    06.0
1085:  BCF    03.5
1086:  BTFSC  06.0
1087:  GOTO   09A
....................       { 
....................          while(UP==0); 
1088:  BSF    03.5
1089:  BSF    06.0
108A:  BCF    03.5
108B:  BTFSS  06.0
108C:  GOTO   088
....................          select = (select == 1)? 2: select-1; 
108D:  DECFSZ 2C,W
108E:  GOTO   091
108F:  MOVLW  02
1090:  GOTO   093
1091:  MOVLW  01
1092:  SUBWF  2C,W
1093:  MOVWF  2C
....................          hienthi(select); 
1094:  MOVF   2C,W
1095:  MOVWF  4E
1096:  BCF    0A.4
1097:  CALL   5A1
1098:  BSF    0A.4
....................       } 
1099:  GOTO   0B2
....................       else if(DOWN==0) 
109A:  BSF    03.5
109B:  BSF    06.1
109C:  BCF    03.5
109D:  BTFSC  06.1
109E:  GOTO   0B2
....................       { 
....................          while(DOWN==0); 
109F:  BSF    03.5
10A0:  BSF    06.1
10A1:  BCF    03.5
10A2:  BTFSS  06.1
10A3:  GOTO   09F
....................          select = (select == 2)? 1: select+1; 
10A4:  MOVF   2C,W
10A5:  SUBLW  02
10A6:  BTFSS  03.2
10A7:  GOTO   0AA
10A8:  MOVLW  01
10A9:  GOTO   0AC
10AA:  MOVLW  01
10AB:  ADDWF  2C,W
10AC:  MOVWF  2C
....................          hienthi(select); 
10AD:  MOVF   2C,W
10AE:  MOVWF  4E
10AF:  BCF    0A.4
10B0:  CALL   5A1
10B1:  BSF    0A.4
....................       }  
....................       ////////////DISPLAY//////////////// 
....................       if(OK==0 && select == 1) 
10B2:  BSF    03.5
10B3:  BSF    06.2
10B4:  BCF    03.5
10B5:  BTFSC  06.2
10B6:  GOTO   16D
10B7:  DECFSZ 2C,W
10B8:  GOTO   16D
....................       { 
....................          while(OK==0); 
10B9:  BSF    03.5
10BA:  BSF    06.2
10BB:  BCF    03.5
10BC:  BTFSS  06.2
10BD:  GOTO   0B9
....................          xoamanhinh(); 
10BE:  BCF    0A.4
10BF:  CALL   5C1
10C0:  BSF    0A.4
....................          select = 1; 
10C1:  MOVLW  01
10C2:  MOVWF  2C
....................          while(TRUE) 
....................          { 
....................             display_onoff(); 
10C3:  BCF    0A.4
10C4:  GOTO   5D9
10C5:  BSF    0A.4
....................             delay_ms(500); 
10C6:  MOVLW  02
10C7:  MOVWF  4E
10C8:  MOVLW  FA
10C9:  MOVWF  5C
10CA:  BCF    0A.4
10CB:  CALL   34E
10CC:  BSF    0A.4
10CD:  DECFSZ 4E,F
10CE:  GOTO   0C8
....................             lcd_gotoxy(8,2); 
10CF:  MOVLW  08
10D0:  MOVWF  5C
10D1:  MOVLW  02
10D2:  MOVWF  5D
10D3:  BCF    0A.4
10D4:  CALL   4F7
10D5:  BSF    0A.4
....................             printf(lcd_putc,"Temp:%02.0f",Nhietdo); 
10D6:  MOVLW  27
10D7:  BSF    03.6
10D8:  MOVWF  0D
10D9:  MOVLW  03
10DA:  MOVWF  0F
10DB:  BCF    03.0
10DC:  MOVLW  05
10DD:  BCF    03.6
10DE:  MOVWF  4E
10DF:  BCF    0A.4
10E0:  GOTO   62B
10E1:  BSF    0A.4
10E2:  MOVLW  41
10E3:  MOVWF  04
10E4:  MOVF   40,W
10E5:  MOVWF  51
10E6:  MOVF   3F,W
10E7:  MOVWF  50
10E8:  MOVF   3E,W
10E9:  MOVWF  4F
10EA:  MOVF   3D,W
10EB:  MOVWF  4E
10EC:  CLRF   52
10ED:  BCF    0A.4
10EE:  BSF    0A.3
10EF:  GOTO   000
10F0:  BSF    0A.4
10F1:  BCF    0A.3
....................             lcd_putc(223); 
10F2:  MOVLW  DF
10F3:  MOVWF  5B
10F4:  BCF    0A.4
10F5:  CALL   51A
10F6:  BSF    0A.4
....................             lcd_putc("C"); 
10F7:  MOVLW  2D
10F8:  BSF    03.6
10F9:  MOVWF  0D
10FA:  MOVLW  03
10FB:  MOVWF  0F
10FC:  BCF    0A.4
10FD:  BCF    03.6
10FE:  CALL   53E
10FF:  BSF    0A.4
....................             if(BACK==0) 
1100:  BSF    03.5
1101:  BSF    06.3
1102:  BCF    03.5
1103:  BTFSC  06.3
1104:  GOTO   114
....................             { 
....................                while(BACK==0); 
1105:  BSF    03.5
1106:  BSF    06.3
1107:  BCF    03.5
1108:  BTFSS  06.3
1109:  GOTO   105
....................                xoamanhinh(); 
110A:  BCF    0A.4
110B:  CALL   5C1
110C:  BSF    0A.4
....................                hienthi(select); 
110D:  MOVF   2C,W
110E:  MOVWF  4E
110F:  BCF    0A.4
1110:  CALL   5A1
1111:  BSF    0A.4
....................                break; 
1112:  GOTO   16C
....................             } 
1113:  GOTO   16B
....................             else if(BTN_QUAT==0) 
1114:  BSF    03.5
1115:  BSF    06.5
1116:  BCF    03.5
1117:  BTFSC  06.5
1118:  GOTO   12C
....................             { 
....................               while(BTN_QUAT==0); 
1119:  BSF    03.5
111A:  BSF    06.5
111B:  BCF    03.5
111C:  BTFSS  06.5
111D:  GOTO   119
....................               delay_ms(200); 
111E:  MOVLW  C8
111F:  MOVWF  5C
1120:  BCF    0A.4
1121:  CALL   34E
1122:  BSF    0A.4
....................               if(flag_manual!=0) 
1123:  MOVF   33,F
1124:  BTFSC  03.2
1125:  GOTO   12B
....................                output_toggle(PIN_B7); 
1126:  BSF    03.5
1127:  BCF    06.7
1128:  MOVLW  80
1129:  BCF    03.5
112A:  XORWF  06,F
....................             } 
112B:  GOTO   16B
....................             else if(BTN_DEN==0) 
112C:  BSF    03.5
112D:  BSF    06.4
112E:  BCF    03.5
112F:  BTFSC  06.4
1130:  GOTO   144
....................             { 
....................               while(BTN_DEN==0); 
1131:  BSF    03.5
1132:  BSF    06.4
1133:  BCF    03.5
1134:  BTFSS  06.4
1135:  GOTO   131
....................               delay_ms(200); 
1136:  MOVLW  C8
1137:  MOVWF  5C
1138:  BCF    0A.4
1139:  CALL   34E
113A:  BSF    0A.4
....................               if(flag_manual!=0) 
113B:  MOVF   33,F
113C:  BTFSC  03.2
113D:  GOTO   143
....................                output_toggle(PIN_B6); 
113E:  BSF    03.5
113F:  BCF    06.6
1140:  MOVLW  40
1141:  BCF    03.5
1142:  XORWF  06,F
....................             } 
1143:  GOTO   16B
....................             else if(BTN_QUAT2==0) 
1144:  BSF    4D.0
1145:  MOVF   4D,W
1146:  BSF    03.5
1147:  MOVWF  07
1148:  BCF    03.5
1149:  BTFSC  07.0
114A:  GOTO   162
....................             { 
....................               while(BTN_QUAT2==0); 
114B:  BSF    4D.0
114C:  MOVF   4D,W
114D:  BSF    03.5
114E:  MOVWF  07
114F:  BCF    03.5
1150:  BTFSS  07.0
1151:  GOTO   14B
....................               delay_ms(200); 
1152:  MOVLW  C8
1153:  MOVWF  5C
1154:  BCF    0A.4
1155:  CALL   34E
1156:  BSF    0A.4
....................               if(flag_manual!=0) 
1157:  MOVF   33,F
1158:  BTFSC  03.2
1159:  GOTO   161
....................                output_toggle(PIN_C1); 
115A:  BCF    4D.1
115B:  MOVF   4D,W
115C:  BSF    03.5
115D:  MOVWF  07
115E:  MOVLW  02
115F:  BCF    03.5
1160:  XORWF  07,F
....................             }  
1161:  GOTO   16B
....................             else if(bien_auto==1) 
1162:  DECFSZ 43,W
1163:  GOTO   16B
....................             { 
....................                bat_tat_quat(Nguongnhietdo.TOP,Nguongnhietdo.BOT); 
1164:  MOVF   45,W
1165:  MOVWF  4E
1166:  MOVF   46,W
1167:  MOVWF  4F
1168:  BCF    0A.4
1169:  CALL   6C3
116A:  BSF    0A.4
....................             } 
116B:  GOTO   0C3
....................          } 
....................       } 
116C:  GOTO   540
....................       ////////////SETTING//////////////// 
....................       else if(OK==0 && select == 2) 
116D:  BSF    03.5
116E:  BSF    06.2
116F:  BCF    03.5
1170:  BTFSC  06.2
1171:  GOTO   540
1172:  MOVF   2C,W
1173:  SUBLW  02
1174:  BTFSS  03.2
1175:  GOTO   540
....................       { 
....................          while(OK==0); 
1176:  BSF    03.5
1177:  BSF    06.2
1178:  BCF    03.5
1179:  BTFSS  06.2
117A:  GOTO   176
....................          xoamanhinh(); 
117B:  BCF    0A.4
117C:  CALL   5C1
117D:  BSF    0A.4
....................          hienthi_mode(select); 
117E:  MOVF   2C,W
117F:  MOVWF  4E
1180:  BCF    0A.4
1181:  CALL   7B0
1182:  BSF    0A.4
....................          while(TRUE) 
....................          { 
....................             if(UP==0) 
1183:  BSF    03.5
1184:  BSF    06.0
1185:  BCF    03.5
1186:  BTFSC  06.0
1187:  GOTO   19A
....................             { 
....................                while(UP==0); 
1188:  BSF    03.5
1189:  BSF    06.0
118A:  BCF    03.5
118B:  BTFSS  06.0
118C:  GOTO   188
....................                select = (select == 1)? 2: select-1; 
118D:  DECFSZ 2C,W
118E:  GOTO   191
118F:  MOVLW  02
1190:  GOTO   193
1191:  MOVLW  01
1192:  SUBWF  2C,W
1193:  MOVWF  2C
....................                hienthi_mode(select); 
1194:  MOVF   2C,W
1195:  MOVWF  4E
1196:  BCF    0A.4
1197:  CALL   7B0
1198:  BSF    0A.4
....................             } 
1199:  GOTO   53F
....................             else if(DOWN==0) 
119A:  BSF    03.5
119B:  BSF    06.1
119C:  BCF    03.5
119D:  BTFSC  06.1
119E:  GOTO   1B3
....................             { 
....................                while(DOWN==0); 
119F:  BSF    03.5
11A0:  BSF    06.1
11A1:  BCF    03.5
11A2:  BTFSS  06.1
11A3:  GOTO   19F
....................                select = (select == 2)? 1: select+1; 
11A4:  MOVF   2C,W
11A5:  SUBLW  02
11A6:  BTFSS  03.2
11A7:  GOTO   1AA
11A8:  MOVLW  01
11A9:  GOTO   1AC
11AA:  MOVLW  01
11AB:  ADDWF  2C,W
11AC:  MOVWF  2C
....................                hienthi_mode(select); 
11AD:  MOVF   2C,W
11AE:  MOVWF  4E
11AF:  BCF    0A.4
11B0:  CALL   7B0
11B1:  BSF    0A.4
....................             } 
11B2:  GOTO   53F
....................             else if(BACK==0) 
11B3:  BSF    03.5
11B4:  BSF    06.3
11B5:  BCF    03.5
11B6:  BTFSC  06.3
11B7:  GOTO   1C7
....................             { 
....................                while(BACK==0); 
11B8:  BSF    03.5
11B9:  BSF    06.3
11BA:  BCF    03.5
11BB:  BTFSS  06.3
11BC:  GOTO   1B8
....................                xoamanhinh(); 
11BD:  BCF    0A.4
11BE:  CALL   5C1
11BF:  BSF    0A.4
....................                hienthi(select); 
11C0:  MOVF   2C,W
11C1:  MOVWF  4E
11C2:  BCF    0A.4
11C3:  CALL   5A1
11C4:  BSF    0A.4
....................                break; 
11C5:  GOTO   540
....................             } 
11C6:  GOTO   53F
....................             else if(BTN_QUAT==0) 
11C7:  BSF    03.5
11C8:  BSF    06.5
11C9:  BCF    03.5
11CA:  BTFSC  06.5
11CB:  GOTO   1DF
....................             { 
....................                while(BTN_QUAT==0); 
11CC:  BSF    03.5
11CD:  BSF    06.5
11CE:  BCF    03.5
11CF:  BTFSS  06.5
11D0:  GOTO   1CC
....................                delay_ms(200); 
11D1:  MOVLW  C8
11D2:  MOVWF  5C
11D3:  BCF    0A.4
11D4:  CALL   34E
11D5:  BSF    0A.4
....................                if(flag_manual!=0) 
11D6:  MOVF   33,F
11D7:  BTFSC  03.2
11D8:  GOTO   1DE
....................                output_toggle(PIN_B7); 
11D9:  BSF    03.5
11DA:  BCF    06.7
11DB:  MOVLW  80
11DC:  BCF    03.5
11DD:  XORWF  06,F
....................             } 
11DE:  GOTO   53F
....................             else if(BTN_DEN==0) 
11DF:  BSF    03.5
11E0:  BSF    06.4
11E1:  BCF    03.5
11E2:  BTFSC  06.4
11E3:  GOTO   1F7
....................             { 
....................                while(BTN_DEN==0); 
11E4:  BSF    03.5
11E5:  BSF    06.4
11E6:  BCF    03.5
11E7:  BTFSS  06.4
11E8:  GOTO   1E4
....................                delay_ms(200); 
11E9:  MOVLW  C8
11EA:  MOVWF  5C
11EB:  BCF    0A.4
11EC:  CALL   34E
11ED:  BSF    0A.4
....................                if(flag_manual!=0) 
11EE:  MOVF   33,F
11EF:  BTFSC  03.2
11F0:  GOTO   1F6
....................                output_toggle(PIN_B6); 
11F1:  BSF    03.5
11F2:  BCF    06.6
11F3:  MOVLW  40
11F4:  BCF    03.5
11F5:  XORWF  06,F
....................             }   
11F6:  GOTO   53F
....................             else if(BTN_QUAT2==0) 
11F7:  BSF    4D.0
11F8:  MOVF   4D,W
11F9:  BSF    03.5
11FA:  MOVWF  07
11FB:  BCF    03.5
11FC:  BTFSC  07.0
11FD:  GOTO   215
....................             { 
....................                while(BTN_QUAT2==0); 
11FE:  BSF    4D.0
11FF:  MOVF   4D,W
1200:  BSF    03.5
1201:  MOVWF  07
1202:  BCF    03.5
1203:  BTFSS  07.0
1204:  GOTO   1FE
....................                delay_ms(200); 
1205:  MOVLW  C8
1206:  MOVWF  5C
1207:  BCF    0A.4
1208:  CALL   34E
1209:  BSF    0A.4
....................                if(flag_manual!=0) 
120A:  MOVF   33,F
120B:  BTFSC  03.2
120C:  GOTO   214
....................                output_toggle(PIN_C1); 
120D:  BCF    4D.1
120E:  MOVF   4D,W
120F:  BSF    03.5
1210:  MOVWF  07
1211:  MOVLW  02
1212:  BCF    03.5
1213:  XORWF  07,F
....................             }  
1214:  GOTO   53F
....................             ////////////MANUAL//////////////// 
....................             else if(OK==0 && select==1) 
1215:  BSF    03.5
1216:  BSF    06.2
1217:  BCF    03.5
1218:  BTFSC  06.2
1219:  GOTO   3D3
121A:  DECFSZ 2C,W
121B:  GOTO   3D3
....................             { 
....................                while(OK==0); 
121C:  BSF    03.5
121D:  BSF    06.2
121E:  BCF    03.5
121F:  BTFSS  06.2
1220:  GOTO   21C
....................                mode_manual(select); 
1221:  MOVF   2C,W
1222:  MOVWF  4E
1223:  BCF    0A.4
1224:  CALL   7D0
1225:  BSF    0A.4
....................                bien_auto = 0; 
1226:  CLRF   43
....................                //lockquat = 0; 
....................                while(TRUE) 
....................                { 
....................                   if(UP==0) 
1227:  BSF    03.5
1228:  BSF    06.0
1229:  BCF    03.5
122A:  BTFSC  06.0
122B:  GOTO   240
....................                   { 
....................                      while(UP==0); 
122C:  BSF    03.5
122D:  BSF    06.0
122E:  BCF    03.5
122F:  BTFSS  06.0
1230:  GOTO   22C
....................                      select = (select == 1)? 2: select-1; 
1231:  DECFSZ 2C,W
1232:  GOTO   235
1233:  MOVLW  02
1234:  GOTO   237
1235:  MOVLW  01
1236:  SUBWF  2C,W
1237:  MOVWF  2C
....................                      mode_manual(select); 
1238:  MOVF   2C,W
1239:  MOVWF  4E
123A:  BCF    0A.4
123B:  CALL   7D0
123C:  BSF    0A.4
....................                      a=1; 
123D:  MOVLW  01
123E:  MOVWF  4C
....................                   } 
123F:  GOTO   3D1
....................                   else if(DOWN==0) 
1240:  BSF    03.5
1241:  BSF    06.1
1242:  BCF    03.5
1243:  BTFSC  06.1
1244:  GOTO   25B
....................                   { 
....................                      while(DOWN==0); 
1245:  BSF    03.5
1246:  BSF    06.1
1247:  BCF    03.5
1248:  BTFSS  06.1
1249:  GOTO   245
....................                      select = (select == 2)? 1: select+1; 
124A:  MOVF   2C,W
124B:  SUBLW  02
124C:  BTFSS  03.2
124D:  GOTO   250
124E:  MOVLW  01
124F:  GOTO   252
1250:  MOVLW  01
1251:  ADDWF  2C,W
1252:  MOVWF  2C
....................                      mode_manual(select); 
1253:  MOVF   2C,W
1254:  MOVWF  4E
1255:  BCF    0A.4
1256:  CALL   7D0
1257:  BSF    0A.4
....................                      a=1; 
1258:  MOVLW  01
1259:  MOVWF  4C
....................                   }                
125A:  GOTO   3D1
....................                   else if(BACK==0) 
125B:  BSF    03.5
125C:  BSF    06.3
125D:  BCF    03.5
125E:  BTFSC  06.3
125F:  GOTO   26F
....................                   { 
....................                      while(BACK==0); 
1260:  BSF    03.5
1261:  BSF    06.3
1262:  BCF    03.5
1263:  BTFSS  06.3
1264:  GOTO   260
....................                      xoamanhinh(); 
1265:  BCF    0A.4
1266:  CALL   5C1
1267:  BSF    0A.4
....................                      hienthi_mode(select); 
1268:  MOVF   2C,W
1269:  MOVWF  4E
126A:  BCF    0A.4
126B:  CALL   7B0
126C:  BSF    0A.4
....................                      break; 
126D:  GOTO   3D2
....................                   } 
126E:  GOTO   3D1
....................                   else if(BTN_QUAT==0) 
126F:  BSF    03.5
1270:  BSF    06.5
1271:  BCF    03.5
1272:  BTFSC  06.5
1273:  GOTO   287
....................                   { 
....................                     while(BTN_QUAT==0); 
1274:  BSF    03.5
1275:  BSF    06.5
1276:  BCF    03.5
1277:  BTFSS  06.5
1278:  GOTO   274
....................                     delay_ms(200); 
1279:  MOVLW  C8
127A:  MOVWF  5C
127B:  BCF    0A.4
127C:  CALL   34E
127D:  BSF    0A.4
....................                     if(flag_manual!=0) 
127E:  MOVF   33,F
127F:  BTFSC  03.2
1280:  GOTO   286
....................                     output_toggle(PIN_B7); 
1281:  BSF    03.5
1282:  BCF    06.7
1283:  MOVLW  80
1284:  BCF    03.5
1285:  XORWF  06,F
....................                   } 
1286:  GOTO   3D1
....................                   else if(BTN_DEN==0) 
1287:  BSF    03.5
1288:  BSF    06.4
1289:  BCF    03.5
128A:  BTFSC  06.4
128B:  GOTO   29F
....................                   { 
....................                     while(BTN_DEN==0); 
128C:  BSF    03.5
128D:  BSF    06.4
128E:  BCF    03.5
128F:  BTFSS  06.4
1290:  GOTO   28C
....................                     delay_ms(200); 
1291:  MOVLW  C8
1292:  MOVWF  5C
1293:  BCF    0A.4
1294:  CALL   34E
1295:  BSF    0A.4
....................                     if(flag_manual!=0) 
1296:  MOVF   33,F
1297:  BTFSC  03.2
1298:  GOTO   29E
....................                     output_toggle(PIN_B6); 
1299:  BSF    03.5
129A:  BCF    06.6
129B:  MOVLW  40
129C:  BCF    03.5
129D:  XORWF  06,F
....................                   }   
129E:  GOTO   3D1
....................                   else if(BTN_QUAT2==0) 
129F:  BSF    4D.0
12A0:  MOVF   4D,W
12A1:  BSF    03.5
12A2:  MOVWF  07
12A3:  BCF    03.5
12A4:  BTFSC  07.0
12A5:  GOTO   2BD
....................                   { 
....................                      while(BTN_QUAT2==0); 
12A6:  BSF    4D.0
12A7:  MOVF   4D,W
12A8:  BSF    03.5
12A9:  MOVWF  07
12AA:  BCF    03.5
12AB:  BTFSS  07.0
12AC:  GOTO   2A6
....................                      delay_ms(200); 
12AD:  MOVLW  C8
12AE:  MOVWF  5C
12AF:  BCF    0A.4
12B0:  CALL   34E
12B1:  BSF    0A.4
....................                      if(flag_manual!=0) 
12B2:  MOVF   33,F
12B3:  BTFSC  03.2
12B4:  GOTO   2BC
....................                      output_toggle(PIN_C1); 
12B5:  BCF    4D.1
12B6:  MOVF   4D,W
12B7:  BSF    03.5
12B8:  MOVWF  07
12B9:  MOVLW  02
12BA:  BCF    03.5
12BB:  XORWF  07,F
....................                   }                   
12BC:  GOTO   3D1
....................                   else if(OK==0 && select == 1) 
12BD:  BSF    03.5
12BE:  BSF    06.2
12BF:  BCF    03.5
12C0:  BTFSC  06.2
12C1:  GOTO   34E
12C2:  DECFSZ 2C,W
12C3:  GOTO   34E
....................                   { 
....................                     while(OK==0); 
12C4:  BSF    03.5
12C5:  BSF    06.2
12C6:  BCF    03.5
12C7:  BTFSS  06.2
12C8:  GOTO   2C4
....................                      lcd_gotoxy(1,1); 
12C9:  MOVLW  01
12CA:  MOVWF  5C
12CB:  MOVWF  5D
12CC:  BCF    0A.4
12CD:  CALL   4F7
12CE:  BSF    0A.4
....................                      printf(lcd_putc,"  -- MANUAL --");                     
12CF:  MOVLW  2E
12D0:  BSF    03.6
12D1:  MOVWF  0D
12D2:  MOVLW  03
12D3:  MOVWF  0F
12D4:  BCF    0A.4
12D5:  BCF    03.6
12D6:  CALL   53E
12D7:  BSF    0A.4
....................                      lcd_gotoxy(1,2); 
12D8:  MOVLW  01
12D9:  MOVWF  5C
12DA:  MOVLW  02
12DB:  MOVWF  5D
12DC:  BCF    0A.4
12DD:  CALL   4F7
12DE:  BSF    0A.4
....................                      printf(lcd_putc,"   READY !!!  "); 
12DF:  MOVLW  36
12E0:  BSF    03.6
12E1:  MOVWF  0D
12E2:  MOVLW  03
12E3:  MOVWF  0F
12E4:  BCF    0A.4
12E5:  BCF    03.6
12E6:  CALL   53E
12E7:  BSF    0A.4
....................                      flag_manual = 1; 
12E8:  MOVLW  01
12E9:  MOVWF  33
....................                      select = 1; 
12EA:  MOVWF  2C
....................                      while(TRUE) 
....................                      { 
....................                          if(BACK==0) 
12EB:  BSF    03.5
12EC:  BSF    06.3
12ED:  BCF    03.5
12EE:  BTFSC  06.3
12EF:  GOTO   2FF
....................                         { 
....................                            while(BACK==0); 
12F0:  BSF    03.5
12F1:  BSF    06.3
12F2:  BCF    03.5
12F3:  BTFSS  06.3
12F4:  GOTO   2F0
....................                            xoamanhinh(); 
12F5:  BCF    0A.4
12F6:  CALL   5C1
12F7:  BSF    0A.4
....................                            mode_manual(select); 
12F8:  MOVF   2C,W
12F9:  MOVWF  4E
12FA:  BCF    0A.4
12FB:  CALL   7D0
12FC:  BSF    0A.4
....................                            break; 
12FD:  GOTO   34D
....................                         } 
12FE:  GOTO   34C
....................                         else if(BTN_QUAT==0) 
12FF:  BSF    03.5
1300:  BSF    06.5
1301:  BCF    03.5
1302:  BTFSC  06.5
1303:  GOTO   317
....................                         { 
....................                            while(BTN_QUAT==0); 
1304:  BSF    03.5
1305:  BSF    06.5
1306:  BCF    03.5
1307:  BTFSS  06.5
1308:  GOTO   304
....................                            delay_ms(200); 
1309:  MOVLW  C8
130A:  MOVWF  5C
130B:  BCF    0A.4
130C:  CALL   34E
130D:  BSF    0A.4
....................                            if(flag_manual!=0) 
130E:  MOVF   33,F
130F:  BTFSC  03.2
1310:  GOTO   316
....................                               output_toggle(PIN_B7); 
1311:  BSF    03.5
1312:  BCF    06.7
1313:  MOVLW  80
1314:  BCF    03.5
1315:  XORWF  06,F
....................                         } 
1316:  GOTO   34C
....................                         else if(BTN_DEN==0) 
1317:  BSF    03.5
1318:  BSF    06.4
1319:  BCF    03.5
131A:  BTFSC  06.4
131B:  GOTO   32F
....................                         { 
....................                            while(BTN_DEN==0); 
131C:  BSF    03.5
131D:  BSF    06.4
131E:  BCF    03.5
131F:  BTFSS  06.4
1320:  GOTO   31C
....................                            delay_ms(200); 
1321:  MOVLW  C8
1322:  MOVWF  5C
1323:  BCF    0A.4
1324:  CALL   34E
1325:  BSF    0A.4
....................                            if(flag_manual!=0) 
1326:  MOVF   33,F
1327:  BTFSC  03.2
1328:  GOTO   32E
....................                               output_toggle(PIN_B6); 
1329:  BSF    03.5
132A:  BCF    06.6
132B:  MOVLW  40
132C:  BCF    03.5
132D:  XORWF  06,F
....................                         } 
132E:  GOTO   34C
....................                          else if(BTN_QUAT2==0) 
132F:  BSF    4D.0
1330:  MOVF   4D,W
1331:  BSF    03.5
1332:  MOVWF  07
1333:  BCF    03.5
1334:  BTFSC  07.0
1335:  GOTO   34C
....................                         { 
....................                            while(BTN_QUAT2==0); 
1336:  BSF    4D.0
1337:  MOVF   4D,W
1338:  BSF    03.5
1339:  MOVWF  07
133A:  BCF    03.5
133B:  BTFSS  07.0
133C:  GOTO   336
....................                            delay_ms(200); 
133D:  MOVLW  C8
133E:  MOVWF  5C
133F:  BCF    0A.4
1340:  CALL   34E
1341:  BSF    0A.4
....................                            if(flag_manual!=0) 
1342:  MOVF   33,F
1343:  BTFSC  03.2
1344:  GOTO   34C
....................                               output_toggle(PIN_C1); 
1345:  BCF    4D.1
1346:  MOVF   4D,W
1347:  BSF    03.5
1348:  MOVWF  07
1349:  MOVLW  02
134A:  BCF    03.5
134B:  XORWF  07,F
....................                         }  
134C:  GOTO   2EB
....................                      } 
....................                   }      
134D:  GOTO   3D1
....................                   else if(OK==0 && select == 2) 
134E:  BSF    03.5
134F:  BSF    06.2
1350:  BCF    03.5
1351:  BTFSC  06.2
1352:  GOTO   3D1
1353:  MOVF   2C,W
1354:  SUBLW  02
1355:  BTFSS  03.2
1356:  GOTO   3D1
....................                   { 
....................                      while(OK==0); 
1357:  BSF    03.5
1358:  BSF    06.2
1359:  BCF    03.5
135A:  BTFSS  06.2
135B:  GOTO   357
....................                      lcd_gotoxy(1,1); 
135C:  MOVLW  01
135D:  MOVWF  5C
135E:  MOVWF  5D
135F:  BCF    0A.4
1360:  CALL   4F7
1361:  BSF    0A.4
....................                      printf(lcd_putc,"  -- MANUAL --");                     
1362:  MOVLW  3E
1363:  BSF    03.6
1364:  MOVWF  0D
1365:  MOVLW  03
1366:  MOVWF  0F
1367:  BCF    0A.4
1368:  BCF    03.6
1369:  CALL   53E
136A:  BSF    0A.4
....................                      lcd_gotoxy(1,2); 
136B:  MOVLW  01
136C:  MOVWF  5C
136D:  MOVLW  02
136E:  MOVWF  5D
136F:  BCF    0A.4
1370:  CALL   4F7
1371:  BSF    0A.4
....................                      printf(lcd_putc,"   SHUTDOWN !!!"); 
1372:  MOVLW  46
1373:  BSF    03.6
1374:  MOVWF  0D
1375:  MOVLW  03
1376:  MOVWF  0F
1377:  BCF    0A.4
1378:  BCF    03.6
1379:  CALL   53E
137A:  BSF    0A.4
....................                      flag_manual =0; 
137B:  CLRF   33
....................                      select = 1; 
137C:  MOVLW  01
137D:  MOVWF  2C
....................                      while(TRUE) 
....................                      { 
....................                          if(BACK==0) 
137E:  BSF    03.5
137F:  BSF    06.3
1380:  BCF    03.5
1381:  BTFSC  06.3
1382:  GOTO   392
....................                         { 
....................                            while(BACK==0); 
1383:  BSF    03.5
1384:  BSF    06.3
1385:  BCF    03.5
1386:  BTFSS  06.3
1387:  GOTO   383
....................                            xoamanhinh(); 
1388:  BCF    0A.4
1389:  CALL   5C1
138A:  BSF    0A.4
....................                            mode_manual(select); 
138B:  MOVF   2C,W
138C:  MOVWF  4E
138D:  BCF    0A.4
138E:  CALL   7D0
138F:  BSF    0A.4
....................                            break; 
1390:  GOTO   3D1
....................                         } 
1391:  GOTO   3D0
....................                         else if(BTN_QUAT==0) 
1392:  BSF    03.5
1393:  BSF    06.5
1394:  BCF    03.5
1395:  BTFSC  06.5
1396:  GOTO   3A5
....................                         { 
....................                            while(BTN_QUAT==0); 
1397:  BSF    03.5
1398:  BSF    06.5
1399:  BCF    03.5
139A:  BTFSS  06.5
139B:  GOTO   397
....................                            if(flag_manual!=0) 
139C:  MOVF   33,F
139D:  BTFSC  03.2
139E:  GOTO   3A4
....................                            output_toggle(PIN_B7); 
139F:  BSF    03.5
13A0:  BCF    06.7
13A1:  MOVLW  80
13A2:  BCF    03.5
13A3:  XORWF  06,F
....................                         } 
13A4:  GOTO   3D0
....................                         else if(BTN_DEN==0) 
13A5:  BSF    03.5
13A6:  BSF    06.4
13A7:  BCF    03.5
13A8:  BTFSC  06.4
13A9:  GOTO   3B8
....................                         { 
....................                            while(BTN_DEN==0); 
13AA:  BSF    03.5
13AB:  BSF    06.4
13AC:  BCF    03.5
13AD:  BTFSS  06.4
13AE:  GOTO   3AA
....................                            if(flag_manual!=0) 
13AF:  MOVF   33,F
13B0:  BTFSC  03.2
13B1:  GOTO   3B7
....................                            output_toggle(PIN_B6); 
13B2:  BSF    03.5
13B3:  BCF    06.6
13B4:  MOVLW  40
13B5:  BCF    03.5
13B6:  XORWF  06,F
....................                         } 
13B7:  GOTO   3D0
....................                          else if(BTN_QUAT2==0) 
13B8:  BSF    4D.0
13B9:  MOVF   4D,W
13BA:  BSF    03.5
13BB:  MOVWF  07
13BC:  BCF    03.5
13BD:  BTFSC  07.0
13BE:  GOTO   3D0
....................                         { 
....................                            while(BTN_QUAT2==0); 
13BF:  BSF    4D.0
13C0:  MOVF   4D,W
13C1:  BSF    03.5
13C2:  MOVWF  07
13C3:  BCF    03.5
13C4:  BTFSS  07.0
13C5:  GOTO   3BF
....................                            if(flag_manual!=0) 
13C6:  MOVF   33,F
13C7:  BTFSC  03.2
13C8:  GOTO   3D0
....................                            output_toggle(PIN_C1); 
13C9:  BCF    4D.1
13CA:  MOVF   4D,W
13CB:  BSF    03.5
13CC:  MOVWF  07
13CD:  MOVLW  02
13CE:  BCF    03.5
13CF:  XORWF  07,F
....................                         }  
13D0:  GOTO   37E
....................                      }                      
....................                   }                   
13D1:  GOTO   227
....................                } 
....................             } 
13D2:  GOTO   53F
....................             ////////////AUTO//////////////// 
....................             else if(OK==0 && select==2) 
13D3:  BSF    03.5
13D4:  BSF    06.2
13D5:  BCF    03.5
13D6:  BTFSC  06.2
13D7:  GOTO   53F
13D8:  MOVF   2C,W
13D9:  SUBLW  02
13DA:  BTFSS  03.2
13DB:  GOTO   53F
....................             { 
....................                while(OK==0); 
13DC:  BSF    03.5
13DD:  BSF    06.2
13DE:  BCF    03.5
13DF:  BTFSS  06.2
13E0:  GOTO   3DC
....................                xoamanhinh(); 
13E1:  BCF    0A.4
13E2:  CALL   5C1
13E3:  BSF    0A.4
....................                luachon_caidat(select); 
13E4:  MOVF   2C,W
13E5:  MOVWF  4E
13E6:  BCF    0A.4
13E7:  BSF    0A.3
13E8:  CALL   18C
13E9:  BSF    0A.4
13EA:  BCF    0A.3
....................                bien_auto = 1; 
13EB:  MOVLW  01
13EC:  MOVWF  43
....................                lockquat = 1; 
13ED:  MOVWF  44
....................                while(TRUE) 
....................                { 
....................                   bat_tat_quat(Nguongnhietdo.TOP,Nguongnhietdo.BOT); 
13EE:  MOVF   45,W
13EF:  MOVWF  4E
13F0:  MOVF   46,W
13F1:  MOVWF  4F
13F2:  BCF    0A.4
13F3:  CALL   6C3
13F4:  BSF    0A.4
....................                   if(UP==0) 
13F5:  BSF    03.5
13F6:  BSF    06.0
13F7:  BCF    03.5
13F8:  BTFSC  06.0
13F9:  GOTO   40E
....................                   { 
....................                      while(UP==0); 
13FA:  BSF    03.5
13FB:  BSF    06.0
13FC:  BCF    03.5
13FD:  BTFSS  06.0
13FE:  GOTO   3FA
....................                      select = (select == 1)? 2: select-1; 
13FF:  DECFSZ 2C,W
1400:  GOTO   403
1401:  MOVLW  02
1402:  GOTO   405
1403:  MOVLW  01
1404:  SUBWF  2C,W
1405:  MOVWF  2C
....................                      luachon_caidat(select); 
1406:  MOVF   2C,W
1407:  MOVWF  4E
1408:  BCF    0A.4
1409:  BSF    0A.3
140A:  CALL   18C
140B:  BSF    0A.4
140C:  BCF    0A.3
....................                   } 
140D:  GOTO   53E
....................                   else if(DOWN==0) 
140E:  BSF    03.5
140F:  BSF    06.1
1410:  BCF    03.5
1411:  BTFSC  06.1
1412:  GOTO   429
....................                   { 
....................                      while(DOWN==0); 
1413:  BSF    03.5
1414:  BSF    06.1
1415:  BCF    03.5
1416:  BTFSS  06.1
1417:  GOTO   413
....................                      select = (select == 2)? 1: select+1; 
1418:  MOVF   2C,W
1419:  SUBLW  02
141A:  BTFSS  03.2
141B:  GOTO   41E
141C:  MOVLW  01
141D:  GOTO   420
141E:  MOVLW  01
141F:  ADDWF  2C,W
1420:  MOVWF  2C
....................                      luachon_caidat(select); 
1421:  MOVF   2C,W
1422:  MOVWF  4E
1423:  BCF    0A.4
1424:  BSF    0A.3
1425:  CALL   18C
1426:  BSF    0A.4
1427:  BCF    0A.3
....................                   } 
1428:  GOTO   53E
....................                   else if(BACK==0) 
1429:  BSF    03.5
142A:  BSF    06.3
142B:  BCF    03.5
142C:  BTFSC  06.3
142D:  GOTO   43D
....................                   { 
....................                      while(BACK==0); 
142E:  BSF    03.5
142F:  BSF    06.3
1430:  BCF    03.5
1431:  BTFSS  06.3
1432:  GOTO   42E
....................                      xoamanhinh(); 
1433:  BCF    0A.4
1434:  CALL   5C1
1435:  BSF    0A.4
....................                      hienthi_mode(select); 
1436:  MOVF   2C,W
1437:  MOVWF  4E
1438:  BCF    0A.4
1439:  CALL   7B0
143A:  BSF    0A.4
....................                      break; 
143B:  GOTO   53F
....................                   } 
143C:  GOTO   53E
....................                   ////////////////FAN///////////////// 
....................                   else if(OK==0 && select == 1) 
143D:  BSF    03.5
143E:  BSF    06.2
143F:  BCF    03.5
1440:  BTFSC  06.2
1441:  GOTO   479
1442:  DECFSZ 2C,W
1443:  GOTO   479
....................                   { 
....................                      while(OK==0); 
1444:  BSF    03.5
1445:  BSF    06.2
1446:  BCF    03.5
1447:  BTFSS  06.2
1448:  GOTO   444
....................                      xoamanhinh(); 
1449:  BCF    0A.4
144A:  CALL   5C1
144B:  BSF    0A.4
....................                      caidat_fan(select); 
144C:  MOVF   2C,W
144D:  MOVWF  4E
144E:  BCF    0A.4
144F:  BSF    0A.3
1450:  CALL   1B7
1451:  BSF    0A.4
1452:  BCF    0A.3
....................                      lcd_gotoxy(12, 1); 
1453:  MOVLW  0C
1454:  MOVWF  5C
1455:  MOVLW  01
1456:  MOVWF  5D
1457:  BCF    0A.4
1458:  CALL   4F7
1459:  BSF    0A.4
....................                      printf(lcd_putc,"%3d",Nguongnhietdo.TOP); 
145A:  MOVF   45,W
145B:  MOVWF  4F
145C:  MOVLW  13
145D:  MOVWF  50
145E:  BCF    0A.4
145F:  BSF    0A.3
1460:  CALL   1E3
1461:  BSF    0A.4
1462:  BCF    0A.3
....................                      lcd_gotoxy(12, 2); 
1463:  MOVLW  0C
1464:  MOVWF  5C
1465:  MOVLW  02
1466:  MOVWF  5D
1467:  BCF    0A.4
1468:  CALL   4F7
1469:  BSF    0A.4
....................                      printf(lcd_putc,"%3d",Nguongnhietdo.BOT);    
146A:  MOVF   46,W
146B:  MOVWF  4F
146C:  MOVLW  13
146D:  MOVWF  50
146E:  BCF    0A.4
146F:  BSF    0A.3
1470:  CALL   1E3
1471:  BSF    0A.4
1472:  BCF    0A.3
....................                      xuli_FAN(); 
1473:  BCF    0A.4
1474:  BSF    0A.3
1475:  GOTO   269
1476:  BSF    0A.4
1477:  BCF    0A.3
....................                   } 
1478:  GOTO   53E
....................                   ////////////////LIGHT///////////////// 
....................                   else if(OK==0 && select == 2) 
1479:  BSF    03.5
147A:  BSF    06.2
147B:  BCF    03.5
147C:  BTFSC  06.2
147D:  GOTO   53E
147E:  MOVF   2C,W
147F:  SUBLW  02
1480:  BTFSS  03.2
1481:  GOTO   53E
....................                   { 
....................                      while(OK==0); 
1482:  BSF    03.5
1483:  BSF    06.2
1484:  BCF    03.5
1485:  BTFSS  06.2
1486:  GOTO   482
....................                      xoamanhinh(); 
1487:  BCF    0A.4
1488:  CALL   5C1
1489:  BSF    0A.4
....................                      timerbattat_den(select); 
148A:  MOVF   2C,W
148B:  MOVWF  4F
148C:  BCF    0A.4
148D:  BSF    0A.3
148E:  CALL   38B
148F:  BSF    0A.4
1490:  BCF    0A.3
....................                      while(TRUE) 
....................                      { 
....................                         if(UP==0) 
1491:  BSF    03.5
1492:  BSF    06.0
1493:  BCF    03.5
1494:  BTFSC  06.0
1495:  GOTO   4AA
....................                         { 
....................                            while(UP==0); 
1496:  BSF    03.5
1497:  BSF    06.0
1498:  BCF    03.5
1499:  BTFSS  06.0
149A:  GOTO   496
....................                            select = (select == 1)? 2: select-1; 
149B:  DECFSZ 2C,W
149C:  GOTO   49F
149D:  MOVLW  02
149E:  GOTO   4A1
149F:  MOVLW  01
14A0:  SUBWF  2C,W
14A1:  MOVWF  2C
....................                            timerbattat_den(select); 
14A2:  MOVF   2C,W
14A3:  MOVWF  4F
14A4:  BCF    0A.4
14A5:  BSF    0A.3
14A6:  CALL   38B
14A7:  BSF    0A.4
14A8:  BCF    0A.3
....................                         } 
14A9:  GOTO   53D
....................                         else if(DOWN==0) 
14AA:  BSF    03.5
14AB:  BSF    06.1
14AC:  BCF    03.5
14AD:  BTFSC  06.1
14AE:  GOTO   4C5
....................                         { 
....................                            while(DOWN==0); 
14AF:  BSF    03.5
14B0:  BSF    06.1
14B1:  BCF    03.5
14B2:  BTFSS  06.1
14B3:  GOTO   4AF
....................                            select = (select == 2)? 1: select+1; 
14B4:  MOVF   2C,W
14B5:  SUBLW  02
14B6:  BTFSS  03.2
14B7:  GOTO   4BA
14B8:  MOVLW  01
14B9:  GOTO   4BC
14BA:  MOVLW  01
14BB:  ADDWF  2C,W
14BC:  MOVWF  2C
....................                            timerbattat_den(select); 
14BD:  MOVF   2C,W
14BE:  MOVWF  4F
14BF:  BCF    0A.4
14C0:  BSF    0A.3
14C1:  CALL   38B
14C2:  BSF    0A.4
14C3:  BCF    0A.3
....................                         }    
14C4:  GOTO   53D
....................                         else if(BACK==0) 
14C5:  BSF    03.5
14C6:  BSF    06.3
14C7:  BCF    03.5
14C8:  BTFSC  06.3
14C9:  GOTO   4DB
....................                         { 
....................                            while(BACK==0); 
14CA:  BSF    03.5
14CB:  BSF    06.3
14CC:  BCF    03.5
14CD:  BTFSS  06.3
14CE:  GOTO   4CA
....................                            xoamanhinh(); 
14CF:  BCF    0A.4
14D0:  CALL   5C1
14D1:  BSF    0A.4
....................                            luachon_caidat(select); 
14D2:  MOVF   2C,W
14D3:  MOVWF  4E
14D4:  BCF    0A.4
14D5:  BSF    0A.3
14D6:  CALL   18C
14D7:  BSF    0A.4
14D8:  BCF    0A.3
....................                            break; 
14D9:  GOTO   53E
....................                         }  
14DA:  GOTO   53D
....................                         else if(OK==0 && select == 1)  
14DB:  BSF    03.5
14DC:  BSF    06.2
14DD:  BCF    03.5
14DE:  BTFSC  06.2
14DF:  GOTO   50C
14E0:  DECFSZ 2C,W
14E1:  GOTO   50C
....................                         { 
....................                            while(OK==0); 
14E2:  BSF    03.5
14E3:  BSF    06.2
14E4:  BCF    03.5
14E5:  BTFSS  06.2
14E6:  GOTO   4E2
....................                            xoamanhinh(); 
14E7:  BCF    0A.4
14E8:  CALL   5C1
14E9:  BSF    0A.4
....................                            caidat_light(select); 
14EA:  MOVF   2C,W
14EB:  MOVWF  4F
14EC:  BCF    0A.4
14ED:  BSF    0A.3
14EE:  CALL   3B7
14EF:  BSF    0A.4
14F0:  BCF    0A.3
....................                            lcd_gotoxy(10, 2); 
14F1:  MOVLW  0A
14F2:  MOVWF  5C
14F3:  MOVLW  02
14F4:  MOVWF  5D
14F5:  BCF    0A.4
14F6:  CALL   4F7
14F7:  BSF    0A.4
....................                            printf(lcd_putc,"%3d",time_light); 
14F8:  MOVF   30,W
14F9:  MOVWF  4F
14FA:  MOVLW  13
14FB:  MOVWF  50
14FC:  BCF    0A.4
14FD:  BSF    0A.3
14FE:  CALL   1E3
14FF:  BSF    0A.4
1500:  BCF    0A.3
....................                            flag_dasetup = 0; 
1501:  CLRF   31
....................                            flag_battatden = 1; 
1502:  MOVLW  01
1503:  MOVWF  34
....................                            xuli_LIGHT(select); 
1504:  MOVF   2C,W
1505:  MOVWF  4E
1506:  BCF    0A.4
1507:  BSF    0A.3
1508:  CALL   3F5
1509:  BSF    0A.4
150A:  BCF    0A.3
....................                         } 
150B:  GOTO   53D
....................                         else if(OK==0 && select == 2) 
150C:  BSF    03.5
150D:  BSF    06.2
150E:  BCF    03.5
150F:  BTFSC  06.2
1510:  GOTO   53D
1511:  MOVF   2C,W
1512:  SUBLW  02
1513:  BTFSS  03.2
1514:  GOTO   53D
....................                         { 
....................                            while(OK==0); 
1515:  BSF    03.5
1516:  BSF    06.2
1517:  BCF    03.5
1518:  BTFSS  06.2
1519:  GOTO   515
....................                            xoamanhinh(); 
151A:  BCF    0A.4
151B:  CALL   5C1
151C:  BSF    0A.4
....................                            caidat_light(select); 
151D:  MOVF   2C,W
151E:  MOVWF  4F
151F:  BCF    0A.4
1520:  BSF    0A.3
1521:  CALL   3B7
1522:  BSF    0A.4
1523:  BCF    0A.3
....................                            lcd_gotoxy(10, 2); 
1524:  MOVLW  0A
1525:  MOVWF  5C
1526:  MOVLW  02
1527:  MOVWF  5D
1528:  BCF    0A.4
1529:  CALL   4F7
152A:  BSF    0A.4
....................                            printf(lcd_putc,"%3d",time_light); 
152B:  MOVF   30,W
152C:  MOVWF  4F
152D:  MOVLW  13
152E:  MOVWF  50
152F:  BCF    0A.4
1530:  BSF    0A.3
1531:  CALL   1E3
1532:  BSF    0A.4
1533:  BCF    0A.3
....................                            flag_dasetup = 0; 
1534:  CLRF   31
....................                            flag_battatden = 0; 
1535:  CLRF   34
....................                            xuli_LIGHT(select); 
1536:  MOVF   2C,W
1537:  MOVWF  4E
1538:  BCF    0A.4
1539:  BSF    0A.3
153A:  CALL   3F5
153B:  BSF    0A.4
153C:  BCF    0A.3
....................                         } 
153D:  GOTO   491
....................                      } 
....................                   } 
153E:  GOTO   3EE
....................                }             
....................             } 
153F:  GOTO   183
....................          } 
....................       }  
1540:  GOTO   083
....................    } 
.................... } 
....................  
1541:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
